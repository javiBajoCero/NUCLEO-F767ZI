
freertos_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007614  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d58  08007d58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d60  08007d60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046f8  20000070  08007dd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004768  08007dd8  00024768  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa46  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fd6  00000000  00000000  0003fae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ad8  00000000  00000000  00043ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f0  00000000  00000000  00045598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bc0b  00000000  00000000  00046e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000152f8  00000000  00000000  00072a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b573  00000000  00000000  00087d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001932fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d0  00000000  00000000  0019337c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080077fc 	.word	0x080077fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080077fc 	.word	0x080077fc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f8f8 	bl	80007da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f006 f88c 	bl	8006708 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f005 fec6 	bl	8006380 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_IncTick+0x20>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x24>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_IncTick+0x24>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	200041f8 	.word	0x200041f8

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200041f8 	.word	0x200041f8

0800063c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff ffee 	bl	8000624 <HAL_GetTick>
 8000648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000654:	d005      	beq.n	8000662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_Delay+0x40>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000662:	bf00      	nop
 8000664:	f7ff ffde 	bl	8000624 <HAL_GetTick>
 8000668:	4602      	mov	r2, r0
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8f7      	bhi.n	8000664 <HAL_Delay+0x28>
  {
  }
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000

08000680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <__NVIC_SetPriorityGrouping+0x40>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <__NVIC_SetPriorityGrouping+0x40>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	05fa0000 	.word	0x05fa0000

080006c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	f003 0307 	and.w	r3, r3, #7
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db0b      	blt.n	800070e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 021f 	and.w	r2, r3, #31
 80006fc:	4907      	ldr	r1, [pc, #28]	; (800071c <__NVIC_EnableIRQ+0x38>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	095b      	lsrs	r3, r3, #5
 8000704:	2001      	movs	r0, #1
 8000706:	fa00 f202 	lsl.w	r2, r0, r2
 800070a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e100 	.word	0xe000e100

08000720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db0a      	blt.n	800074a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	490c      	ldr	r1, [pc, #48]	; (800076c <__NVIC_SetPriority+0x4c>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000748:	e00a      	b.n	8000760 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4908      	ldr	r1, [pc, #32]	; (8000770 <__NVIC_SetPriority+0x50>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	3b04      	subs	r3, #4
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	440b      	add	r3, r1
 800075e:	761a      	strb	r2, [r3, #24]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f1c3 0307 	rsb	r3, r3, #7
 800078e:	2b04      	cmp	r3, #4
 8000790:	bf28      	it	cs
 8000792:	2304      	movcs	r3, #4
 8000794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3304      	adds	r3, #4
 800079a:	2b06      	cmp	r3, #6
 800079c:	d902      	bls.n	80007a4 <NVIC_EncodePriority+0x30>
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3b03      	subs	r3, #3
 80007a2:	e000      	b.n	80007a6 <NVIC_EncodePriority+0x32>
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43da      	mvns	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	401a      	ands	r2, r3
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007bc:	f04f 31ff 	mov.w	r1, #4294967295
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43d9      	mvns	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	4313      	orrs	r3, r2
         );
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3724      	adds	r7, #36	; 0x24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ff4c 	bl	8000680 <__NVIC_SetPriorityGrouping>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000802:	f7ff ff61 	bl	80006c8 <__NVIC_GetPriorityGrouping>
 8000806:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	68b9      	ldr	r1, [r7, #8]
 800080c:	6978      	ldr	r0, [r7, #20]
 800080e:	f7ff ffb1 	bl	8000774 <NVIC_EncodePriority>
 8000812:	4602      	mov	r2, r0
 8000814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff80 	bl	8000720 <__NVIC_SetPriority>
}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff54 	bl	80006e4 <__NVIC_EnableIRQ>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000854:	4ba9      	ldr	r3, [pc, #676]	; (8000afc <HAL_ETH_Init+0x2b8>)
 8000856:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e183      	b.n	8000b72 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d106      	bne.n	8000884 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f005 fda6 	bl	80063d0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000884:	4b9e      	ldr	r3, [pc, #632]	; (8000b00 <HAL_ETH_Init+0x2bc>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000888:	4a9d      	ldr	r2, [pc, #628]	; (8000b00 <HAL_ETH_Init+0x2bc>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6453      	str	r3, [r2, #68]	; 0x44
 8000890:	4b9b      	ldr	r3, [pc, #620]	; (8000b00 <HAL_ETH_Init+0x2bc>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800089c:	4b99      	ldr	r3, [pc, #612]	; (8000b04 <HAL_ETH_Init+0x2c0>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4a98      	ldr	r2, [pc, #608]	; (8000b04 <HAL_ETH_Init+0x2c0>)
 80008a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008a6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008a8:	4b96      	ldr	r3, [pc, #600]	; (8000b04 <HAL_ETH_Init+0x2c0>)
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	4994      	ldr	r1, [pc, #592]	; (8000b04 <HAL_ETH_Init+0x2c0>)
 80008b2:	4313      	orrs	r3, r2
 80008b4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f042 0201 	orr.w	r2, r2, #1
 80008c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008cc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80008ce:	f7ff fea9 	bl	8000624 <HAL_GetTick>
 80008d2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008d4:	e011      	b.n	80008fa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008d6:	f7ff fea5 	bl	8000624 <HAL_GetTick>
 80008da:	4602      	mov	r2, r0
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008e4:	d909      	bls.n	80008fa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2203      	movs	r2, #3
 80008ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80008f6:	2303      	movs	r3, #3
 80008f8:	e13b      	b.n	8000b72 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1e4      	bne.n	80008d6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f023 031c 	bic.w	r3, r3, #28
 800091a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800091c:	f002 f842 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 8000920:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	4a78      	ldr	r2, [pc, #480]	; (8000b08 <HAL_ETH_Init+0x2c4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d908      	bls.n	800093c <HAL_ETH_Init+0xf8>
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	4a77      	ldr	r2, [pc, #476]	; (8000b0c <HAL_ETH_Init+0x2c8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d804      	bhi.n	800093c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e027      	b.n	800098c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	4a73      	ldr	r2, [pc, #460]	; (8000b0c <HAL_ETH_Init+0x2c8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d908      	bls.n	8000956 <HAL_ETH_Init+0x112>
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	4a72      	ldr	r2, [pc, #456]	; (8000b10 <HAL_ETH_Init+0x2cc>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d804      	bhi.n	8000956 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f043 030c 	orr.w	r3, r3, #12
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	e01a      	b.n	800098c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	4a6d      	ldr	r2, [pc, #436]	; (8000b10 <HAL_ETH_Init+0x2cc>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d903      	bls.n	8000966 <HAL_ETH_Init+0x122>
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	4a6c      	ldr	r2, [pc, #432]	; (8000b14 <HAL_ETH_Init+0x2d0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d911      	bls.n	800098a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	4a6a      	ldr	r2, [pc, #424]	; (8000b14 <HAL_ETH_Init+0x2d0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d908      	bls.n	8000980 <HAL_ETH_Init+0x13c>
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4a69      	ldr	r2, [pc, #420]	; (8000b18 <HAL_ETH_Init+0x2d4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d804      	bhi.n	8000980 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	61fb      	str	r3, [r7, #28]
 800097e:	e005      	b.n	800098c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	e000      	b.n	800098c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800098a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	69fa      	ldr	r2, [r7, #28]
 8000992:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000994:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000998:	2100      	movs	r1, #0
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f956 	bl	8000c4c <HAL_ETH_WritePHYRegister>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00b      	beq.n	80009be <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009aa:	6939      	ldr	r1, [r7, #16]
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f9b3 	bl	8000d18 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e0d9      	b.n	8000b72 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009be:	20ff      	movs	r0, #255	; 0xff
 80009c0:	f7ff fe3c 	bl	800063c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 80a7 	beq.w	8000b1c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80009ce:	f7ff fe29 	bl	8000624 <HAL_GetTick>
 80009d2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	461a      	mov	r2, r3
 80009da:	2101      	movs	r1, #1
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f8cd 	bl	8000b7c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009e2:	f7ff fe1f 	bl	8000624 <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d90f      	bls.n	8000a14 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80009f8:	6939      	ldr	r1, [r7, #16]
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f98c 	bl	8000d18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a10:	2303      	movs	r3, #3
 8000a12:	e0ae      	b.n	8000b72 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0da      	beq.n	80009d4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a22:	2100      	movs	r1, #0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f000 f911 	bl	8000c4c <HAL_ETH_WritePHYRegister>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00b      	beq.n	8000a48 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a34:	6939      	ldr	r1, [r7, #16]
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f96e 	bl	8000d18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a44:	2301      	movs	r3, #1
 8000a46:	e094      	b.n	8000b72 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a48:	f7ff fdec 	bl	8000624 <HAL_GetTick>
 8000a4c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	461a      	mov	r2, r3
 8000a54:	2101      	movs	r1, #1
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f890 	bl	8000b7c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a5c:	f7ff fde2 	bl	8000624 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d90f      	bls.n	8000a8e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a72:	6939      	ldr	r1, [r7, #16]
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f94f 	bl	8000d18 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e071      	b.n	8000b72 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f003 0320 	and.w	r3, r3, #32
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0da      	beq.n	8000a4e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	211f      	movs	r1, #31
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 f86b 	bl	8000b7c <HAL_ETH_ReadPHYRegister>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00b      	beq.n	8000ac4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ab0:	6939      	ldr	r1, [r7, #16]
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f930 	bl	8000d18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2201      	movs	r2, #1
 8000abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e056      	b.n	8000b72 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	e002      	b.n	8000ade <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	e037      	b.n	8000b60 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	e032      	b.n	8000b60 <HAL_ETH_Init+0x31c>
 8000afa:	bf00      	nop
 8000afc:	03938700 	.word	0x03938700
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	01312cff 	.word	0x01312cff
 8000b0c:	02160ebf 	.word	0x02160ebf
 8000b10:	039386ff 	.word	0x039386ff
 8000b14:	05f5e0ff 	.word	0x05f5e0ff
 8000b18:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	461a      	mov	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 f889 	bl	8000c4c <HAL_ETH_WritePHYRegister>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00b      	beq.n	8000b58 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b44:	6939      	ldr	r1, [r7, #16]
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f8e6 	bl	8000d18 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e00c      	b.n	8000b72 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b58:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b5c:	f7ff fd6e 	bl	800063c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b60:	6939      	ldr	r1, [r7, #16]
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f8d8 	bl	8000d18 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop

08000b7c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	460b      	mov	r3, r1
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b82      	cmp	r3, #130	; 0x82
 8000b9c:	d101      	bne.n	8000ba2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	e050      	b.n	8000c44 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2282      	movs	r2, #130	; 0x82
 8000ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f003 031c 	and.w	r3, r3, #28
 8000bb8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	8a1b      	ldrh	r3, [r3, #16]
 8000bbe:	02db      	lsls	r3, r3, #11
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000bc8:	897b      	ldrh	r3, [r7, #10]
 8000bca:	019b      	lsls	r3, r3, #6
 8000bcc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f023 0302 	bic.w	r3, r3, #2
 8000bdc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000bee:	f7ff fd19 	bl	8000624 <HAL_GetTick>
 8000bf2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bf4:	e015      	b.n	8000c22 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bf6:	f7ff fd15 	bl	8000624 <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d309      	bcc.n	8000c1a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e014      	b.n	8000c44 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1e4      	bne.n	8000bf6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	460b      	mov	r3, r1
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b42      	cmp	r3, #66	; 0x42
 8000c6c:	d101      	bne.n	8000c72 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e04e      	b.n	8000d10 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2242      	movs	r2, #66	; 0x42
 8000c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f003 031c 	and.w	r3, r3, #28
 8000c88:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	8a1b      	ldrh	r3, [r3, #16]
 8000c8e:	02db      	lsls	r3, r3, #11
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c98:	897b      	ldrh	r3, [r7, #10]
 8000c9a:	019b      	lsls	r3, r3, #6
 8000c9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000cc8:	f7ff fcac 	bl	8000624 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000cce:	e015      	b.n	8000cfc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000cd0:	f7ff fca8 	bl	8000624 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cde:	d309      	bcc.n	8000cf4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e00d      	b.n	8000d10 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1e4      	bne.n	8000cd0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0b0      	sub	sp, #192	; 0xc0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d007      	beq.n	8000d3e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d34:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	663b      	str	r3, [r7, #96]	; 0x60
 8000d64:	e001      	b.n	8000d6a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000d74:	2300      	movs	r3, #0
 8000d76:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000d84:	2340      	movs	r3, #64	; 0x40
 8000d86:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000dec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000df0:	4bab      	ldr	r3, [pc, #684]	; (80010a0 <ETH_MACDMAConfig+0x388>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000dfc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e00:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e04:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e0a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e0e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e12:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e18:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e1c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e20:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e24:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e28:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e32:	4313      	orrs	r3, r2
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e40:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff fbf5 	bl	800063c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e5a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e60:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000e62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000e64:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000e66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000e6a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000e70:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000e76:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000e7c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000e80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000e88:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e8a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fbd0 	bl	800063c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ea4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000eae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000eb8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000ec4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ec8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000ecc:	4013      	ands	r3, r2
 8000ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ed6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000edc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000ee2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000ee8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000eee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000ef4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000ef6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f08:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fb91 	bl	800063c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f22:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f24:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff fb7c 	bl	800063c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f4c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f56:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000f5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f60:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000f72:	2304      	movs	r3, #4
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000faa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <ETH_MACDMAConfig+0x38c>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000fb6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000fba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000fbc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000fbe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8000fc0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8000fc2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8000fc4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8000fc6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8000fc8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8000fca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8000fce:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8000fd2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8000fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8000fd6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000fd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fea:	4413      	add	r3, r2
 8000fec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ff0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	f241 0318 	movw	r3, #4120	; 0x1018
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fb1a 	bl	800063c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001010:	4413      	add	r3, r2
 8001012:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001016:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800101c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800101e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001020:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001024:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001028:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800102a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800102c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800102e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001032:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800103c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001040:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff faf3 	bl	800063c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001062:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d10d      	bne.n	8001088 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f241 031c 	movw	r3, #4124	; 0x101c
 8001074:	4413      	add	r3, r2
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6811      	ldr	r1, [r2, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <ETH_MACDMAConfig+0x390>)
 800107e:	431a      	orrs	r2, r3
 8001080:	f241 031c 	movw	r3, #4124	; 0x101c
 8001084:	440b      	add	r3, r1
 8001086:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	461a      	mov	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f80b 	bl	80010ac <ETH_MACAddressConfig>
}
 8001096:	bf00      	nop
 8001098:	37c0      	adds	r7, #192	; 0xc0
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	ff20810f 	.word	0xff20810f
 80010a4:	f8de3f23 	.word	0xf8de3f23
 80010a8:	00010040 	.word	0x00010040

080010ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3305      	adds	r3, #5
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	3204      	adds	r2, #4
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <ETH_MACAddressConfig+0x68>)
 80010ce:	4413      	add	r3, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3303      	adds	r3, #3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	061a      	lsls	r2, r3, #24
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3302      	adds	r3, #2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3301      	adds	r3, #1
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	4313      	orrs	r3, r2
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <ETH_MACAddressConfig+0x6c>)
 80010fe:	4413      	add	r3, r2
 8001100:	461a      	mov	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40028040 	.word	0x40028040
 8001118:	40028044 	.word	0x40028044

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e175      	b.n	8001428 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8164 	bne.w	8001422 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x4e>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b12      	cmp	r3, #18
 8001168:	d123      	bne.n	80011b2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	69b9      	ldr	r1, [r7, #24]
 80011ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0203 	and.w	r2, r3, #3
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d00b      	beq.n	8001206 <HAL_GPIO_Init+0xea>
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fa:	2b11      	cmp	r3, #17
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b12      	cmp	r3, #18
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80be 	beq.w	8001422 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b65      	ldr	r3, [pc, #404]	; (800143c <HAL_GPIO_Init+0x320>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a64      	ldr	r2, [pc, #400]	; (800143c <HAL_GPIO_Init+0x320>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b62      	ldr	r3, [pc, #392]	; (800143c <HAL_GPIO_Init+0x320>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012be:	4a60      	ldr	r2, [pc, #384]	; (8001440 <HAL_GPIO_Init+0x324>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a57      	ldr	r2, [pc, #348]	; (8001444 <HAL_GPIO_Init+0x328>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d037      	beq.n	800135a <HAL_GPIO_Init+0x23e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d031      	beq.n	8001356 <HAL_GPIO_Init+0x23a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a55      	ldr	r2, [pc, #340]	; (800144c <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d02b      	beq.n	8001352 <HAL_GPIO_Init+0x236>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a54      	ldr	r2, [pc, #336]	; (8001450 <HAL_GPIO_Init+0x334>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x232>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a53      	ldr	r2, [pc, #332]	; (8001454 <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x22e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x22a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x226>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x222>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x21e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x21a>
 8001332:	2309      	movs	r3, #9
 8001334:	e012      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001336:	230a      	movs	r3, #10
 8001338:	e010      	b.n	800135c <HAL_GPIO_Init+0x240>
 800133a:	2308      	movs	r3, #8
 800133c:	e00e      	b.n	800135c <HAL_GPIO_Init+0x240>
 800133e:	2307      	movs	r3, #7
 8001340:	e00c      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001342:	2306      	movs	r3, #6
 8001344:	e00a      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001346:	2305      	movs	r3, #5
 8001348:	e008      	b.n	800135c <HAL_GPIO_Init+0x240>
 800134a:	2304      	movs	r3, #4
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x240>
 800134e:	2303      	movs	r3, #3
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x240>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x240>
 800135a:	2300      	movs	r3, #0
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f002 0203 	and.w	r2, r2, #3
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800136c:	4934      	ldr	r1, [pc, #208]	; (8001440 <HAL_GPIO_Init+0x324>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800137a:	4b3c      	ldr	r3, [pc, #240]	; (800146c <HAL_GPIO_Init+0x350>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139e:	4a33      	ldr	r2, [pc, #204]	; (800146c <HAL_GPIO_Init+0x350>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_GPIO_Init+0x350>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c8:	4a28      	ldr	r2, [pc, #160]	; (800146c <HAL_GPIO_Init+0x350>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_GPIO_Init+0x350>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_GPIO_Init+0x350>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_GPIO_Init+0x350>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <HAL_GPIO_Init+0x350>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f67f ae86 	bls.w	800113c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	3724      	adds	r7, #36	; 0x24
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40022000 	.word	0x40022000
 8001468:	40022400 	.word	0x40022400
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	401a      	ands	r2, r3
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d104      	bne.n	80014c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	041a      	lsls	r2, r3, #16
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f005 f81e 	bl	8006540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e006      	b.n	8001560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800155e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d104      	bne.n	8001572 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001570:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_I2C_Init+0x11c>)
 800157e:	430b      	orrs	r3, r1
 8001580:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001590:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	ea42 0103 	orr.w	r1, r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	021a      	lsls	r2, r3, #8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69d9      	ldr	r1, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	02008000 	.word	0x02008000

080015f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	461a      	mov	r2, r3
 8001604:	460b      	mov	r3, r1
 8001606:	817b      	strh	r3, [r7, #10]
 8001608:	4613      	mov	r3, r2
 800160a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b20      	cmp	r3, #32
 8001616:	f040 80da 	bne.w	80017ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_I2C_Master_Transmit+0x30>
 8001624:	2302      	movs	r3, #2
 8001626:	e0d3      	b.n	80017d0 <HAL_I2C_Master_Transmit+0x1d8>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001630:	f7fe fff8 	bl	8000624 <HAL_GetTick>
 8001634:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2319      	movs	r3, #25
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f9f8 	bl	8001a38 <I2C_WaitOnFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0be      	b.n	80017d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2221      	movs	r2, #33	; 0x21
 8001656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2210      	movs	r2, #16
 800165e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	893a      	ldrh	r2, [r7, #8]
 8001672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29b      	uxth	r3, r3
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d90e      	bls.n	80016a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168e:	b2da      	uxtb	r2, r3
 8001690:	8979      	ldrh	r1, [r7, #10]
 8001692:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 faee 	bl	8001c7c <I2C_TransferConfig>
 80016a0:	e06c      	b.n	800177c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	8979      	ldrh	r1, [r7, #10]
 80016b4:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 fadd 	bl	8001c7c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80016c2:	e05b      	b.n	800177c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	6a39      	ldr	r1, [r7, #32]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f9f5 	bl	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e07b      	b.n	80017d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d034      	beq.n	800177c <HAL_I2C_Master_Transmit+0x184>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001716:	2b00      	cmp	r3, #0
 8001718:	d130      	bne.n	800177c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	2200      	movs	r2, #0
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f987 	bl	8001a38 <I2C_WaitOnFlagUntilTimeout>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e04d      	b.n	80017d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d90e      	bls.n	800175c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	b2da      	uxtb	r2, r3
 800174a:	8979      	ldrh	r1, [r7, #10]
 800174c:	2300      	movs	r3, #0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 fa91 	bl	8001c7c <I2C_TransferConfig>
 800175a:	e00f      	b.n	800177c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176a:	b2da      	uxtb	r2, r3
 800176c:	8979      	ldrh	r1, [r7, #10]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fa80 	bl	8001c7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001780:	b29b      	uxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d19e      	bne.n	80016c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	6a39      	ldr	r1, [r7, #32]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f9d4 	bl	8001b38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e01a      	b.n	80017d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2220      	movs	r2, #32
 80017a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_I2C_Master_Transmit+0x1e4>)
 80017ae:	400b      	ands	r3, r1
 80017b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
  }
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	80002000 	.word	0x80002000
 80017dc:	fe00e800 	.word	0xfe00e800

080017e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	460b      	mov	r3, r1
 80017ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	f040 80ef 	bne.w	80019e0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001810:	d101      	bne.n	8001816 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
 8001814:	e0e5      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_I2C_IsDeviceReady+0x44>
 8001820:	2302      	movs	r3, #2
 8001822:	e0de      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2224      	movs	r2, #36	; 0x24
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d105      	bne.n	800184e <HAL_I2C_IsDeviceReady+0x6e>
 8001842:	897b      	ldrh	r3, [r7, #10]
 8001844:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_I2C_IsDeviceReady+0x20c>)
 800184a:	4313      	orrs	r3, r2
 800184c:	e004      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x78>
 800184e:	897b      	ldrh	r3, [r7, #10]
 8001850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001854:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800185e:	f7fe fee1 	bl	8000624 <HAL_GetTick>
 8001862:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b20      	cmp	r3, #32
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b10      	cmp	r3, #16
 8001886:	bf0c      	ite	eq
 8001888:	2301      	moveq	r3, #1
 800188a:	2300      	movne	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001890:	e034      	b.n	80018fc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d01a      	beq.n	80018d0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800189a:	f7fe fec3 	bl	8000624 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d302      	bcc.n	80018b0 <HAL_I2C_IsDeviceReady+0xd0>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10f      	bne.n	80018d0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e088      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b20      	cmp	r3, #32
 80018dc:	bf0c      	ite	eq
 80018de:	2301      	moveq	r3, #1
 80018e0:	2300      	movne	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b10      	cmp	r3, #16
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_I2C_IsDeviceReady+0x128>
 8001902:	7fbb      	ldrb	r3, [r7, #30]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0c4      	beq.n	8001892 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b10      	cmp	r3, #16
 8001914:	d01a      	beq.n	800194c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	2120      	movs	r1, #32
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f889 	bl	8001a38 <I2C_WaitOnFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e058      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2220      	movs	r2, #32
 8001936:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e04a      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	2120      	movs	r1, #32
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f86e 	bl	8001a38 <I2C_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e03d      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2210      	movs	r2, #16
 800196c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2220      	movs	r2, #32
 8001974:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d118      	bne.n	80019b0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800198c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	2120      	movs	r1, #32
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f84d 	bl	8001a38 <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e01c      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2220      	movs	r2, #32
 80019ae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	f63f af3d 	bhi.w	800183a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0220 	orr.w	r2, r3, #32
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	02002000 	.word	0x02002000

080019f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d103      	bne.n	8001a0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d007      	beq.n	8001a2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	619a      	str	r2, [r3, #24]
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a48:	e022      	b.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d01e      	beq.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a52:	f7fe fde7 	bl	8000624 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d302      	bcc.n	8001a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d113      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00f      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d0cd      	beq.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ac4:	e02c      	b.n	8001b20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f870 	bl	8001bb0 <I2C_IsAcknowledgeFailed>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e02a      	b.n	8001b30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d01e      	beq.n	8001b20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae2:	f7fe fd9f 	bl	8000624 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d302      	bcc.n	8001af8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d113      	bne.n	8001b20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e007      	b.n	8001b30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d1cb      	bne.n	8001ac6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b44:	e028      	b.n	8001b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f830 	bl	8001bb0 <I2C_IsAcknowledgeFailed>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e026      	b.n	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7fe fd63 	bl	8000624 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d113      	bne.n	8001b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f043 0220 	orr.w	r2, r3, #32
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e007      	b.n	8001ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d1cf      	bne.n	8001b46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d151      	bne.n	8001c6e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bca:	e022      	b.n	8001c12 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd2:	d01e      	beq.n	8001c12 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd4:	f7fe fd26 	bl	8000624 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d302      	bcc.n	8001bea <I2C_IsAcknowledgeFailed+0x3a>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d113      	bne.n	8001c12 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e02e      	b.n	8001c70 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d1d5      	bne.n	8001bcc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2210      	movs	r2, #16
 8001c26:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff fedd 	bl	80019f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c42:	400b      	ands	r3, r1
 8001c44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f043 0204 	orr.w	r2, r3, #4
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	fe00e800 	.word	0xfe00e800

08001c7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	817b      	strh	r3, [r7, #10]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	0d5b      	lsrs	r3, r3, #21
 8001c98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <I2C_TransferConfig+0x58>)
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	ea02 0103 	and.w	r1, r2, r3
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cac:	7a7b      	ldrb	r3, [r7, #9]
 8001cae:	041b      	lsls	r3, r3, #16
 8001cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	03ff63ff 	.word	0x03ff63ff

08001cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d138      	bne.n	8001d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e032      	b.n	8001d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2224      	movs	r2, #36	; 0x24
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d139      	bne.n	8001df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e033      	b.n	8001dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2224      	movs	r2, #36	; 0x24
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001df8:	2302      	movs	r3, #2
  }
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e08:	b08f      	sub	sp, #60	; 0x3c
 8001e0a:	af0a      	add	r7, sp, #40	; 0x28
 8001e0c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e10a      	b.n	800202e <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d106      	bne.n	8001e32 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f004 fc0f 	bl	8006650 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 f906 	bl	8004050 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	687e      	ldr	r6, [r7, #4]
 8001e4c:	466d      	mov	r5, sp
 8001e4e:	f106 0410 	add.w	r4, r6, #16
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e62:	1d33      	adds	r3, r6, #4
 8001e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f002 f89a 	bl	8003fa0 <USB_CoreInit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0d7      	b.n	800202e <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 f8f4 	bl	8004072 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e04a      	b.n	8001f26 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333d      	adds	r3, #61	; 0x3d
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	333c      	adds	r3, #60	; 0x3c
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	b298      	uxth	r0, r3
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3342      	adds	r3, #66	; 0x42
 8001ecc:	4602      	mov	r2, r0
 8001ece:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	333f      	adds	r3, #63	; 0x3f
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3344      	adds	r3, #68	; 0x44
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3348      	adds	r3, #72	; 0x48
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3350      	adds	r3, #80	; 0x50
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3af      	bcc.n	8001e90 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e044      	b.n	8001fc0 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3b5      	bcc.n	8001f36 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	687e      	ldr	r6, [r7, #4]
 8001fd2:	466d      	mov	r5, sp
 8001fd4:	f106 0410 	add.w	r4, r6, #16
 8001fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe8:	1d33      	adds	r3, r6, #4
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f002 f86b 	bl	80040c8 <USB_DevInit>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e014      	b.n	800202e <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f80b 	bl	8002038 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fa2b 	bl	8004482 <USB_DevDisconnect>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002038 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_PCDEx_ActivateLPM+0x44>)
 8002068:	4313      	orrs	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	10000003 	.word	0x10000003

08002080 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000

080020a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_PWREx_EnableOverDrive+0x98>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_PWREx_EnableOverDrive+0x98>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ce:	f7fe faa9 	bl	8000624 <HAL_GetTick>
 80020d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020d4:	e009      	b.n	80020ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020d6:	f7fe faa5 	bl	8000624 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020e4:	d901      	bls.n	80020ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e022      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d1ee      	bne.n	80020d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002104:	f7fe fa8e 	bl	8000624 <HAL_GetTick>
 8002108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800210a:	e009      	b.n	8002120 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800210c:	f7fe fa8a 	bl	8000624 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800211a:	d901      	bls.n	8002120 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e007      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800212c:	d1ee      	bne.n	800210c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e25e      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8087 	beq.w	8002272 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002164:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00c      	beq.n	800218a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002170:	4b93      	ldr	r3, [pc, #588]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d112      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62>
 800217c:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002188:	d10b      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218a:	4b8d      	ldr	r3, [pc, #564]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d06c      	beq.n	8002270 <HAL_RCC_OscConfig+0x130>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d168      	bne.n	8002270 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e238      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x7a>
 80021ac:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a83      	ldr	r2, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e02e      	b.n	8002218 <HAL_RCC_OscConfig+0xd8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x9c>
 80021c2:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xd8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0xc0>
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a72      	ldr	r2, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xd8>
 8002200:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fa00 	bl	8000624 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe f9fc 	bl	8000624 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1ec      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe f9ec 	bl	8000624 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002250:	f7fe f9e8 	bl	8000624 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e1d8      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x110>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d069      	beq.n	8002352 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227e:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228a:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d11c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x190>
 8002296:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d116      	bne.n	80022d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x17a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1ac      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	493d      	ldr	r1, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	e040      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe f99e 	bl	8000624 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ec:	f7fe f99a 	bl	8000624 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e18a      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4929      	ldr	r1, [pc, #164]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
 800231e:	e018      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe f97a 	bl	8000624 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002334:	f7fe f976 	bl	8000624 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e166      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d038      	beq.n	80023d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d019      	beq.n	800239a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe f957 	bl	8000624 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237a:	f7fe f953 	bl	8000624 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e143      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800238e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x23a>
 8002398:	e01a      	b.n	80023d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	4a08      	ldr	r2, [pc, #32]	; (80023c0 <HAL_RCC_OscConfig+0x280>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe f93d 	bl	8000624 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe f939 	bl	8000624 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d903      	bls.n	80023c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e129      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
 80023c0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b95      	ldr	r3, [pc, #596]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ee      	bne.n	80023ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a4 	beq.w	8002526 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b8f      	ldr	r3, [pc, #572]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b8c      	ldr	r3, [pc, #560]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a8b      	ldr	r2, [pc, #556]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b89      	ldr	r3, [pc, #548]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002406:	4b86      	ldr	r3, [pc, #536]	; (8002620 <HAL_RCC_OscConfig+0x4e0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002412:	4b83      	ldr	r3, [pc, #524]	; (8002620 <HAL_RCC_OscConfig+0x4e0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a82      	ldr	r2, [pc, #520]	; (8002620 <HAL_RCC_OscConfig+0x4e0>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7fe f901 	bl	8000624 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe f8fd 	bl	8000624 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0ed      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002438:	4b79      	ldr	r3, [pc, #484]	; (8002620 <HAL_RCC_OscConfig+0x4e0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x31a>
 800244c:	4b73      	ldr	r3, [pc, #460]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a72      	ldr	r2, [pc, #456]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x33c>
 8002462:	4b6e      	ldr	r3, [pc, #440]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	4a6d      	ldr	r2, [pc, #436]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6713      	str	r3, [r2, #112]	; 0x70
 800246e:	4b6b      	ldr	r3, [pc, #428]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a6a      	ldr	r2, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x35e>
 8002484:	4b65      	ldr	r3, [pc, #404]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a64      	ldr	r2, [pc, #400]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	4b62      	ldr	r3, [pc, #392]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a61      	ldr	r2, [pc, #388]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x376>
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a5e      	ldr	r2, [pc, #376]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	4b5c      	ldr	r3, [pc, #368]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	4a5b      	ldr	r2, [pc, #364]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe f8b1 	bl	8000624 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe f8ad 	bl	8000624 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e09b      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x386>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe f89b 	bl	8000624 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe f897 	bl	8000624 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e085      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b44      	ldr	r3, [pc, #272]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d071      	beq.n	8002612 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b08      	cmp	r3, #8
 8002538:	d069      	beq.n	800260e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d14b      	bne.n	80025da <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a35      	ldr	r2, [pc, #212]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe f869 	bl	8000624 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002556:	f7fe f865 	bl	8000624 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e055      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	019b      	lsls	r3, r3, #6
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	061b      	lsls	r3, r3, #24
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	071b      	lsls	r3, r3, #28
 80025a0:	491e      	ldr	r1, [pc, #120]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe f837 	bl	8000624 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe f833 	bl	8000624 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e023      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x47a>
 80025d8:	e01b      	b.n	8002612 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80025e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe f81d 	bl	8000624 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe f819 	bl	8000624 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e009      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f0      	bne.n	80025ee <HAL_RCC_OscConfig+0x4ae>
 800260c:	e001      	b.n	8002612 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	40007000 	.word	0x40007000

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0ce      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b69      	ldr	r3, [pc, #420]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b66      	ldr	r3, [pc, #408]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4964      	ldr	r1, [pc, #400]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0b6      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800268e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800269c:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a51      	ldr	r2, [pc, #324]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	494c      	ldr	r1, [pc, #304]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d040      	beq.n	8002748 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d115      	bne.n	8002706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07d      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e071      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e069      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4935      	ldr	r1, [pc, #212]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002718:	f7fd ff84 	bl	8000624 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fd ff80 	bl	8000624 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e051      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d210      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	4921      	ldr	r1, [pc, #132]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e030      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4915      	ldr	r1, [pc, #84]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490d      	ldr	r1, [pc, #52]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b6:	f000 f81d 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80027ba:	4601      	mov	r1, r0
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	fa21 f303 	lsr.w	r3, r1, r3
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_RCC_ClockConfig+0x1cc>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f003 ff98 	bl	8006708 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08007ca8 	.word	0x08007ca8
 80027f0:	20000008 	.word	0x20000008

080027f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d007      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x32>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d008      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x38>
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80b4 	bne.w	8002988 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002822:	60bb      	str	r3, [r7, #8]
       break;
 8002824:	e0b3      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002826:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002828:	60bb      	str	r3, [r7, #8]
      break;
 800282a:	e0b0      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b5a      	ldr	r3, [pc, #360]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002834:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d04a      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b55      	ldr	r3, [pc, #340]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	f04f 0400 	mov.w	r4, #0
 800284c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	ea03 0501 	and.w	r5, r3, r1
 8002858:	ea04 0602 	and.w	r6, r4, r2
 800285c:	4629      	mov	r1, r5
 800285e:	4632      	mov	r2, r6
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	f04f 0400 	mov.w	r4, #0
 8002868:	0154      	lsls	r4, r2, #5
 800286a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800286e:	014b      	lsls	r3, r1, #5
 8002870:	4619      	mov	r1, r3
 8002872:	4622      	mov	r2, r4
 8002874:	1b49      	subs	r1, r1, r5
 8002876:	eb62 0206 	sbc.w	r2, r2, r6
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f04f 0400 	mov.w	r4, #0
 8002882:	0194      	lsls	r4, r2, #6
 8002884:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002888:	018b      	lsls	r3, r1, #6
 800288a:	1a5b      	subs	r3, r3, r1
 800288c:	eb64 0402 	sbc.w	r4, r4, r2
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	00e2      	lsls	r2, r4, #3
 800289a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800289e:	00d9      	lsls	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	4614      	mov	r4, r2
 80028a4:	195b      	adds	r3, r3, r5
 80028a6:	eb44 0406 	adc.w	r4, r4, r6
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	0262      	lsls	r2, r4, #9
 80028b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028b8:	0259      	lsls	r1, r3, #9
 80028ba:	460b      	mov	r3, r1
 80028bc:	4614      	mov	r4, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	4621      	mov	r1, r4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	f7fd fd08 	bl	80002e0 <__aeabi_uldivmod>
 80028d0:	4603      	mov	r3, r0
 80028d2:	460c      	mov	r4, r1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e049      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	ea03 0501 	and.w	r5, r3, r1
 80028ee:	ea04 0602 	and.w	r6, r4, r2
 80028f2:	4629      	mov	r1, r5
 80028f4:	4632      	mov	r2, r6
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	f04f 0400 	mov.w	r4, #0
 80028fe:	0154      	lsls	r4, r2, #5
 8002900:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002904:	014b      	lsls	r3, r1, #5
 8002906:	4619      	mov	r1, r3
 8002908:	4622      	mov	r2, r4
 800290a:	1b49      	subs	r1, r1, r5
 800290c:	eb62 0206 	sbc.w	r2, r2, r6
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f04f 0400 	mov.w	r4, #0
 8002918:	0194      	lsls	r4, r2, #6
 800291a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	1a5b      	subs	r3, r3, r1
 8002922:	eb64 0402 	sbc.w	r4, r4, r2
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	00e2      	lsls	r2, r4, #3
 8002930:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002934:	00d9      	lsls	r1, r3, #3
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	195b      	adds	r3, r3, r5
 800293c:	eb44 0406 	adc.w	r4, r4, r6
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	02a2      	lsls	r2, r4, #10
 800294a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800294e:	0299      	lsls	r1, r3, #10
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	4618      	mov	r0, r3
 8002956:	4621      	mov	r1, r4
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	461a      	mov	r2, r3
 8002960:	4623      	mov	r3, r4
 8002962:	f7fd fcbd 	bl	80002e0 <__aeabi_uldivmod>
 8002966:	4603      	mov	r3, r0
 8002968:	460c      	mov	r4, r1
 800296a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	60bb      	str	r3, [r7, #8]
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800298a:	60bb      	str	r3, [r7, #8]
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	68bb      	ldr	r3, [r7, #8]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000008 	.word	0x20000008

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff0 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c4:	4601      	mov	r1, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08007cb8 	.word	0x08007cb8

080029e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e8:	f7ff ffdc 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029ec:	4601      	mov	r1, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	0b5b      	lsrs	r3, r3, #13
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4a03      	ldr	r2, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	08007cb8 	.word	0x08007cb8

08002a0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	220f      	movs	r2, #15
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_RCC_GetClockConfig+0x5c>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_GetClockConfig+0x5c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_RCC_GetClockConfig+0x60>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	601a      	str	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40023c00 	.word	0x40023c00

08002a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a98:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a68      	ldr	r2, [pc, #416]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aa2:	6093      	str	r3, [r2, #8]
 8002aa4:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	4964      	ldr	r1, [pc, #400]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad8:	4959      	ldr	r1, [pc, #356]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae8:	d101      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	494a      	ldr	r1, [pc, #296]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 808b 	beq.w	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fd fd54 	bl	8000624 <HAL_GetTick>
 8002b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fd fd50 	bl	8000624 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e38d      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d035      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d02e      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a1a      	ldr	r2, [pc, #104]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d114      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fd fd18 	bl	8000624 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fd fd14 	bl	8000624 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e34f      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ee      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c26:	d111      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	4901      	ldr	r1, [pc, #4]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	0ffffcff 	.word	0x0ffffcff
 8002c4c:	4bb3      	ldr	r3, [pc, #716]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4ab2      	ldr	r2, [pc, #712]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c56:	6093      	str	r3, [r2, #8]
 8002c58:	4bb0      	ldr	r3, [pc, #704]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	49ad      	ldr	r1, [pc, #692]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c76:	4ba9      	ldr	r3, [pc, #676]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7c:	4aa7      	ldr	r2, [pc, #668]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c86:	4ba5      	ldr	r3, [pc, #660]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	49a2      	ldr	r1, [pc, #648]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca4:	4b9d      	ldr	r3, [pc, #628]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cb2:	499a      	ldr	r1, [pc, #616]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc6:	4b95      	ldr	r3, [pc, #596]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd4:	4991      	ldr	r1, [pc, #580]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ce8:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf6:	4989      	ldr	r1, [pc, #548]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d0a:	4b84      	ldr	r3, [pc, #528]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4980      	ldr	r1, [pc, #512]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d2c:	4b7b      	ldr	r3, [pc, #492]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4978      	ldr	r1, [pc, #480]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d4e:	4b73      	ldr	r3, [pc, #460]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f023 020c 	bic.w	r2, r3, #12
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	496f      	ldr	r1, [pc, #444]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	4967      	ldr	r1, [pc, #412]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d92:	4b62      	ldr	r3, [pc, #392]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	495e      	ldr	r1, [pc, #376]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	4956      	ldr	r1, [pc, #344]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dd6:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	494d      	ldr	r1, [pc, #308]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002df8:	4b48      	ldr	r3, [pc, #288]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	4945      	ldr	r1, [pc, #276]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e1a:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e28:	493c      	ldr	r1, [pc, #240]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e3c:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	4934      	ldr	r1, [pc, #208]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d011      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	492b      	ldr	r1, [pc, #172]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	491b      	ldr	r1, [pc, #108]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed0:	4912      	ldr	r1, [pc, #72]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	4909      	ldr	r1, [pc, #36]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00f      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	e002      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	4985      	ldr	r1, [pc, #532]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f34:	4b80      	ldr	r3, [pc, #512]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	497c      	ldr	r1, [pc, #496]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d005      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5a:	f040 80d6 	bne.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a75      	ldr	r2, [pc, #468]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6a:	f7fd fb5b 	bl	8000624 <HAL_GetTick>
 8002f6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f72:	f7fd fb57 	bl	8000624 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b64      	cmp	r3, #100	; 0x64
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e194      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f84:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d021      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11d      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fa4:	4b64      	ldr	r3, [pc, #400]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fb2:	4b61      	ldr	r3, [pc, #388]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb8:	0e1b      	lsrs	r3, r3, #24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	019a      	lsls	r2, r3, #6
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	071b      	lsls	r3, r3, #28
 8002fd8:	4957      	ldr	r1, [pc, #348]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02e      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300a:	d129      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800300c:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003020:	0f1b      	lsrs	r3, r3, #28
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	019a      	lsls	r2, r3, #6
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	071b      	lsls	r3, r3, #28
 8003040:	493d      	ldr	r1, [pc, #244]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003048:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800304a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304e:	f023 021f 	bic.w	r2, r3, #31
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	3b01      	subs	r3, #1
 8003058:	4937      	ldr	r1, [pc, #220]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01d      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800306c:	4b32      	ldr	r3, [pc, #200]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003072:	0e1b      	lsrs	r3, r3, #24
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800307c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003080:	0f1b      	lsrs	r3, r3, #28
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	019a      	lsls	r2, r3, #6
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	431a      	orrs	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	071b      	lsls	r3, r3, #28
 80030a0:	4925      	ldr	r1, [pc, #148]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d011      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	019a      	lsls	r2, r3, #6
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	071b      	lsls	r3, r3, #28
 80030d0:	4919      	ldr	r1, [pc, #100]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80030de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fd fa9e 	bl	8000624 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030ec:	f7fd fa9a 	bl	8000624 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	; 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0d7      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	f040 80cd 	bne.w	80032ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311e:	f7fd fa81 	bl	8000624 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003126:	f7fd fa7d 	bl	8000624 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	; 0x64
 8003132:	d903      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0ba      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003138:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800313c:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003148:	d0ed      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003166:	2b00      	cmp	r3, #0
 8003168:	d02e      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d12a      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003172:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003180:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	0f1b      	lsrs	r3, r3, #28
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	019a      	lsls	r2, r3, #6
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	071b      	lsls	r3, r3, #28
 80031a6:	4944      	ldr	r1, [pc, #272]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031ae:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	493d      	ldr	r1, [pc, #244]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d022      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031dc:	d11d      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	0e1b      	lsrs	r3, r3, #24
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031ec:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	0f1b      	lsrs	r3, r3, #28
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	019a      	lsls	r2, r3, #6
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	061b      	lsls	r3, r3, #24
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	4929      	ldr	r1, [pc, #164]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d028      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	0e1b      	lsrs	r3, r3, #24
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003234:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	4917      	ldr	r1, [pc, #92]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	4911      	ldr	r1, [pc, #68]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7fd f9ce 	bl	8000624 <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800328c:	f7fd f9ca 	bl	8000624 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e007      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032aa:	d1ef      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e01d      	b.n	800330a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f815 	bl	8003312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f000 f986 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_TIM_Base_Start_IT+0x50>)
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d00b      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x42>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d007      	beq.n	800336a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	00010007 	.word	0x00010007

0800337c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0202 	mvn.w	r2, #2
 80033a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f905 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8f7 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f908 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0204 	mvn.w	r2, #4
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8db 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8cd 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f8de 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0208 	mvn.w	r2, #8
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8b1 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8a3 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8b4 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0210 	mvn.w	r2, #16
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2208      	movs	r2, #8
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f887 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f879 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f88a 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0201 	mvn.w	r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f002 fcc6 	bl	8005e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f91a 	bl	8003760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d10e      	bne.n	800355a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d107      	bne.n	800355a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f90d 	bl	8003774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d10e      	bne.n	8003586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d107      	bne.n	8003586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f838 	bl	80035f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b20      	cmp	r3, #32
 8003592:	d10e      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d107      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0220 	mvn.w	r2, #32
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8cd 	bl	800374c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a40      	ldr	r2, [pc, #256]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d00f      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3c      	ldr	r2, [pc, #240]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3b      	ldr	r2, [pc, #236]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <TIM_Base_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d027      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d023      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01f      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2a      	ldr	r2, [pc, #168]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <TIM_Base_SetConfig+0x124>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d017      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <TIM_Base_SetConfig+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <TIM_Base_SetConfig+0x12c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <TIM_Base_SetConfig+0x130>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <TIM_Base_SetConfig+0x134>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a24      	ldr	r2, [pc, #144]	; (8003744 <TIM_Base_SetConfig+0x138>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <TIM_Base_SetConfig+0x13c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <TIM_Base_SetConfig+0x114>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0xf8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <TIM_Base_SetConfig+0x124>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40010400 	.word	0x40010400
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800
 8003740:	40001800 	.word	0x40001800
 8003744:	40001c00 	.word	0x40001c00
 8003748:	40002000 	.word	0x40002000

0800374c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e040      	b.n	800381c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f002 ff0c 	bl	80065c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f82c 	bl	8003824 <UART_SetConfig>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e022      	b.n	800381c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fac4 	bl	8003d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003802:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fb4b 	bl	8003eb0 <UART_CheckIdleState>
 800381a:	4603      	mov	r3, r0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4bb1      	ldr	r3, [pc, #708]	; (8003b18 <UART_SetConfig+0x2f4>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	430b      	orrs	r3, r1
 800385e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a9f      	ldr	r2, [pc, #636]	; (8003b1c <UART_SetConfig+0x2f8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d121      	bne.n	80038e8 <UART_SetConfig+0xc4>
 80038a4:	4b9e      	ldr	r3, [pc, #632]	; (8003b20 <UART_SetConfig+0x2fc>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d816      	bhi.n	80038e0 <UART_SetConfig+0xbc>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <UART_SetConfig+0x94>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038d5 	.word	0x080038d5
 80038c0:	080038cf 	.word	0x080038cf
 80038c4:	080038db 	.word	0x080038db
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e151      	b.n	8003b72 <UART_SetConfig+0x34e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e14e      	b.n	8003b72 <UART_SetConfig+0x34e>
 80038d4:	2304      	movs	r3, #4
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e14b      	b.n	8003b72 <UART_SetConfig+0x34e>
 80038da:	2308      	movs	r3, #8
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e148      	b.n	8003b72 <UART_SetConfig+0x34e>
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	bf00      	nop
 80038e6:	e144      	b.n	8003b72 <UART_SetConfig+0x34e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a8d      	ldr	r2, [pc, #564]	; (8003b24 <UART_SetConfig+0x300>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d134      	bne.n	800395c <UART_SetConfig+0x138>
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <UART_SetConfig+0x2fc>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d829      	bhi.n	8003954 <UART_SetConfig+0x130>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <UART_SetConfig+0xe4>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800393d 	.word	0x0800393d
 800390c:	08003955 	.word	0x08003955
 8003910:	08003955 	.word	0x08003955
 8003914:	08003955 	.word	0x08003955
 8003918:	08003949 	.word	0x08003949
 800391c:	08003955 	.word	0x08003955
 8003920:	08003955 	.word	0x08003955
 8003924:	08003955 	.word	0x08003955
 8003928:	08003943 	.word	0x08003943
 800392c:	08003955 	.word	0x08003955
 8003930:	08003955 	.word	0x08003955
 8003934:	08003955 	.word	0x08003955
 8003938:	0800394f 	.word	0x0800394f
 800393c:	2300      	movs	r3, #0
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e117      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003942:	2302      	movs	r3, #2
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e114      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003948:	2304      	movs	r3, #4
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e111      	b.n	8003b72 <UART_SetConfig+0x34e>
 800394e:	2308      	movs	r3, #8
 8003950:	77fb      	strb	r3, [r7, #31]
 8003952:	e10e      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003954:	2310      	movs	r3, #16
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	bf00      	nop
 800395a:	e10a      	b.n	8003b72 <UART_SetConfig+0x34e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a71      	ldr	r2, [pc, #452]	; (8003b28 <UART_SetConfig+0x304>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d120      	bne.n	80039a8 <UART_SetConfig+0x184>
 8003966:	4b6e      	ldr	r3, [pc, #440]	; (8003b20 <UART_SetConfig+0x2fc>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003970:	2b10      	cmp	r3, #16
 8003972:	d00f      	beq.n	8003994 <UART_SetConfig+0x170>
 8003974:	2b10      	cmp	r3, #16
 8003976:	d802      	bhi.n	800397e <UART_SetConfig+0x15a>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <UART_SetConfig+0x164>
 800397c:	e010      	b.n	80039a0 <UART_SetConfig+0x17c>
 800397e:	2b20      	cmp	r3, #32
 8003980:	d005      	beq.n	800398e <UART_SetConfig+0x16a>
 8003982:	2b30      	cmp	r3, #48	; 0x30
 8003984:	d009      	beq.n	800399a <UART_SetConfig+0x176>
 8003986:	e00b      	b.n	80039a0 <UART_SetConfig+0x17c>
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e0f1      	b.n	8003b72 <UART_SetConfig+0x34e>
 800398e:	2302      	movs	r3, #2
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e0ee      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003994:	2304      	movs	r3, #4
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e0eb      	b.n	8003b72 <UART_SetConfig+0x34e>
 800399a:	2308      	movs	r3, #8
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e0e8      	b.n	8003b72 <UART_SetConfig+0x34e>
 80039a0:	2310      	movs	r3, #16
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	bf00      	nop
 80039a6:	e0e4      	b.n	8003b72 <UART_SetConfig+0x34e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5f      	ldr	r2, [pc, #380]	; (8003b2c <UART_SetConfig+0x308>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d120      	bne.n	80039f4 <UART_SetConfig+0x1d0>
 80039b2:	4b5b      	ldr	r3, [pc, #364]	; (8003b20 <UART_SetConfig+0x2fc>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d00f      	beq.n	80039e0 <UART_SetConfig+0x1bc>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d802      	bhi.n	80039ca <UART_SetConfig+0x1a6>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <UART_SetConfig+0x1b0>
 80039c8:	e010      	b.n	80039ec <UART_SetConfig+0x1c8>
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d005      	beq.n	80039da <UART_SetConfig+0x1b6>
 80039ce:	2bc0      	cmp	r3, #192	; 0xc0
 80039d0:	d009      	beq.n	80039e6 <UART_SetConfig+0x1c2>
 80039d2:	e00b      	b.n	80039ec <UART_SetConfig+0x1c8>
 80039d4:	2300      	movs	r3, #0
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e0cb      	b.n	8003b72 <UART_SetConfig+0x34e>
 80039da:	2302      	movs	r3, #2
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e0c8      	b.n	8003b72 <UART_SetConfig+0x34e>
 80039e0:	2304      	movs	r3, #4
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e0c5      	b.n	8003b72 <UART_SetConfig+0x34e>
 80039e6:	2308      	movs	r3, #8
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e0c2      	b.n	8003b72 <UART_SetConfig+0x34e>
 80039ec:	2310      	movs	r3, #16
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	bf00      	nop
 80039f2:	e0be      	b.n	8003b72 <UART_SetConfig+0x34e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <UART_SetConfig+0x30c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d124      	bne.n	8003a48 <UART_SetConfig+0x224>
 80039fe:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <UART_SetConfig+0x2fc>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0c:	d012      	beq.n	8003a34 <UART_SetConfig+0x210>
 8003a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a12:	d802      	bhi.n	8003a1a <UART_SetConfig+0x1f6>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <UART_SetConfig+0x204>
 8003a18:	e012      	b.n	8003a40 <UART_SetConfig+0x21c>
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1e:	d006      	beq.n	8003a2e <UART_SetConfig+0x20a>
 8003a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a24:	d009      	beq.n	8003a3a <UART_SetConfig+0x216>
 8003a26:	e00b      	b.n	8003a40 <UART_SetConfig+0x21c>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e0a1      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e09e      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a34:	2304      	movs	r3, #4
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e09b      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e098      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a40:	2310      	movs	r3, #16
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	bf00      	nop
 8003a46:	e094      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a39      	ldr	r2, [pc, #228]	; (8003b34 <UART_SetConfig+0x310>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d124      	bne.n	8003a9c <UART_SetConfig+0x278>
 8003a52:	4b33      	ldr	r3, [pc, #204]	; (8003b20 <UART_SetConfig+0x2fc>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d012      	beq.n	8003a88 <UART_SetConfig+0x264>
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a66:	d802      	bhi.n	8003a6e <UART_SetConfig+0x24a>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <UART_SetConfig+0x258>
 8003a6c:	e012      	b.n	8003a94 <UART_SetConfig+0x270>
 8003a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a72:	d006      	beq.n	8003a82 <UART_SetConfig+0x25e>
 8003a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a78:	d009      	beq.n	8003a8e <UART_SetConfig+0x26a>
 8003a7a:	e00b      	b.n	8003a94 <UART_SetConfig+0x270>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e077      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a82:	2302      	movs	r3, #2
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e074      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e071      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	77fb      	strb	r3, [r7, #31]
 8003a92:	e06e      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a94:	2310      	movs	r3, #16
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	bf00      	nop
 8003a9a:	e06a      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a25      	ldr	r2, [pc, #148]	; (8003b38 <UART_SetConfig+0x314>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d124      	bne.n	8003af0 <UART_SetConfig+0x2cc>
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	; (8003b20 <UART_SetConfig+0x2fc>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab4:	d012      	beq.n	8003adc <UART_SetConfig+0x2b8>
 8003ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aba:	d802      	bhi.n	8003ac2 <UART_SetConfig+0x29e>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <UART_SetConfig+0x2ac>
 8003ac0:	e012      	b.n	8003ae8 <UART_SetConfig+0x2c4>
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	d006      	beq.n	8003ad6 <UART_SetConfig+0x2b2>
 8003ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003acc:	d009      	beq.n	8003ae2 <UART_SetConfig+0x2be>
 8003ace:	e00b      	b.n	8003ae8 <UART_SetConfig+0x2c4>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e04d      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e04a      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003adc:	2304      	movs	r3, #4
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e047      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e044      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	bf00      	nop
 8003aee:	e040      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <UART_SetConfig+0x318>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d139      	bne.n	8003b6e <UART_SetConfig+0x34a>
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <UART_SetConfig+0x2fc>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b08:	d027      	beq.n	8003b5a <UART_SetConfig+0x336>
 8003b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b0e:	d817      	bhi.n	8003b40 <UART_SetConfig+0x31c>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01c      	beq.n	8003b4e <UART_SetConfig+0x32a>
 8003b14:	e027      	b.n	8003b66 <UART_SetConfig+0x342>
 8003b16:	bf00      	nop
 8003b18:	efff69f3 	.word	0xefff69f3
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40004800 	.word	0x40004800
 8003b2c:	40004c00 	.word	0x40004c00
 8003b30:	40005000 	.word	0x40005000
 8003b34:	40011400 	.word	0x40011400
 8003b38:	40007800 	.word	0x40007800
 8003b3c:	40007c00 	.word	0x40007c00
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b44:	d006      	beq.n	8003b54 <UART_SetConfig+0x330>
 8003b46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b4a:	d009      	beq.n	8003b60 <UART_SetConfig+0x33c>
 8003b4c:	e00b      	b.n	8003b66 <UART_SetConfig+0x342>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e00e      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003b54:	2302      	movs	r3, #2
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e00b      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e008      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003b60:	2308      	movs	r3, #8
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e005      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003b66:	2310      	movs	r3, #16
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	bf00      	nop
 8003b6c:	e001      	b.n	8003b72 <UART_SetConfig+0x34e>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d17c      	bne.n	8003c76 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003b7c:	7ffb      	ldrb	r3, [r7, #31]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d859      	bhi.n	8003c36 <UART_SetConfig+0x412>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <UART_SetConfig+0x364>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bcb 	.word	0x08003bcb
 8003b90:	08003be9 	.word	0x08003be9
 8003b94:	08003c37 	.word	0x08003c37
 8003b98:	08003c01 	.word	0x08003c01
 8003b9c:	08003c37 	.word	0x08003c37
 8003ba0:	08003c37 	.word	0x08003c37
 8003ba4:	08003c37 	.word	0x08003c37
 8003ba8:	08003c1f 	.word	0x08003c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bac:	f7fe ff06 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	005a      	lsls	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	61bb      	str	r3, [r7, #24]
        break;
 8003bc8:	e038      	b.n	8003c3c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003bca:	f7fe ff0b 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	005a      	lsls	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	61bb      	str	r3, [r7, #24]
        break;
 8003be6:	e029      	b.n	8003c3c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	085a      	lsrs	r2, r3, #1
 8003bee:	4b5d      	ldr	r3, [pc, #372]	; (8003d64 <UART_SetConfig+0x540>)
 8003bf0:	4413      	add	r3, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6852      	ldr	r2, [r2, #4]
 8003bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	61bb      	str	r3, [r7, #24]
        break;
 8003bfe:	e01d      	b.n	8003c3c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c00:	f7fe fdf8 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8003c04:	4603      	mov	r3, r0
 8003c06:	005a      	lsls	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	441a      	add	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e00e      	b.n	8003c3c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e002      	b.n	8003c3c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
        break;
 8003c3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b0f      	cmp	r3, #15
 8003c40:	d916      	bls.n	8003c70 <UART_SetConfig+0x44c>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d212      	bcs.n	8003c70 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f023 030f 	bic.w	r3, r3, #15
 8003c52:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	89fa      	ldrh	r2, [r7, #14]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	e06e      	b.n	8003d4e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
 8003c74:	e06b      	b.n	8003d4e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d857      	bhi.n	8003d2c <UART_SetConfig+0x508>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0x460>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08003cc5 	.word	0x08003cc5
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003d2d 	.word	0x08003d2d
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003d2d 	.word	0x08003d2d
 8003c9c:	08003d2d 	.word	0x08003d2d
 8003ca0:	08003d2d 	.word	0x08003d2d
 8003ca4:	08003d15 	.word	0x08003d15
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ca8:	f7fe fe88 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	61bb      	str	r3, [r7, #24]
        break;
 8003cc2:	e036      	b.n	8003d32 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003cc4:	f7fe fe8e 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	441a      	add	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	61bb      	str	r3, [r7, #24]
        break;
 8003cde:	e028      	b.n	8003d32 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	085a      	lsrs	r2, r3, #1
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <UART_SetConfig+0x544>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6852      	ldr	r2, [r2, #4]
 8003cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	61bb      	str	r3, [r7, #24]
        break;
 8003cf6:	e01c      	b.n	8003d32 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003cf8:	f7fe fd7c 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	441a      	add	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	61bb      	str	r3, [r7, #24]
        break;
 8003d12:	e00e      	b.n	8003d32 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	61bb      	str	r3, [r7, #24]
        break;
 8003d2a:	e002      	b.n	8003d32 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
        break;
 8003d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b0f      	cmp	r3, #15
 8003d36:	d908      	bls.n	8003d4a <UART_SetConfig+0x526>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d204      	bcs.n	8003d4a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	e001      	b.n	8003d4e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	01e84800 	.word	0x01e84800
 8003d68:	00f42400 	.word	0x00f42400

08003d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01a      	beq.n	8003e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6a:	d10a      	bne.n	8003e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ebe:	f7fc fbb1 	bl	8000624 <HAL_GetTick>
 8003ec2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d10e      	bne.n	8003ef0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f814 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e00a      	b.n	8003f06 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e02a      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d026      	beq.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f28:	f7fc fb7c 	bl	8000624 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11b      	bne.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e00f      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d0c5      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	f107 001c 	add.w	r0, r7, #28
 8003fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d120      	bne.n	8003ffa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <USB_CoreInit+0xac>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fa60 	bl	80044b4 <USB_CoreReset>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e010      	b.n	800401c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa54 	bl	80044b4 <USB_CoreReset>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10b      	bne.n	800403a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f043 0206 	orr.w	r2, r3, #6
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f043 0220 	orr.w	r2, r3, #32
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004046:	b004      	add	sp, #16
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	ffbdffbf 	.word	0xffbdffbf

08004050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 0201 	bic.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e00b      	b.n	80040b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
 80040b0:	e001      	b.n	80040b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e003      	b.n	80040be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80040b6:	2032      	movs	r0, #50	; 0x32
 80040b8:	f7fc fac0 	bl	800063c <HAL_Delay>

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040c8:	b084      	sub	sp, #16
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b086      	sub	sp, #24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e009      	b.n	80040fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3340      	adds	r3, #64	; 0x40
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	3301      	adds	r3, #1
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b0e      	cmp	r3, #14
 8004100:	d9f2      	bls.n	80040e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d112      	bne.n	800412e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e005      	b.n	800413a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414c:	4619      	mov	r1, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004154:	461a      	mov	r2, r3
 8004156:	680b      	ldr	r3, [r1, #0]
 8004158:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10c      	bne.n	800417a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004166:	2100      	movs	r1, #0
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f971 	bl	8004450 <USB_SetDevSpeed>
 800416e:	e018      	b.n	80041a2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004170:	2101      	movs	r1, #1
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f96c 	bl	8004450 <USB_SetDevSpeed>
 8004178:	e013      	b.n	80041a2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2b03      	cmp	r3, #3
 800417e:	d10c      	bne.n	800419a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004186:	2100      	movs	r1, #0
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f961 	bl	8004450 <USB_SetDevSpeed>
 800418e:	e008      	b.n	80041a2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004190:	2101      	movs	r1, #1
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f95c 	bl	8004450 <USB_SetDevSpeed>
 8004198:	e003      	b.n	80041a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800419a:	2103      	movs	r1, #3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f957 	bl	8004450 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041a2:	2110      	movs	r1, #16
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f90b 	bl	80043c0 <USB_FlushTxFifo>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f929 	bl	800440c <USB_FlushRxFifo>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ca:	461a      	mov	r2, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	461a      	mov	r2, r3
 80041d8:	2300      	movs	r3, #0
 80041da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	461a      	mov	r2, r3
 80041e4:	2300      	movs	r3, #0
 80041e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	e043      	b.n	8004276 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004204:	d118      	bne.n	8004238 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	461a      	mov	r2, r3
 800421a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e013      	b.n	800424a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	461a      	mov	r2, r3
 8004230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e008      	b.n	800424a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004244:	461a      	mov	r2, r3
 8004246:	2300      	movs	r3, #0
 8004248:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	461a      	mov	r2, r3
 8004258:	2300      	movs	r3, #0
 800425a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	461a      	mov	r2, r3
 800426a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800426e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3301      	adds	r3, #1
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d3b7      	bcc.n	80041ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	e043      	b.n	800430c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429a:	d118      	bne.n	80042ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e013      	b.n	80042e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	461a      	mov	r2, r3
 80042c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e008      	b.n	80042e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	461a      	mov	r2, r3
 8004300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004304:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	3301      	adds	r3, #1
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	429a      	cmp	r2, r3
 8004312:	d3b7      	bcc.n	8004284 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004326:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	2b01      	cmp	r3, #1
 800432c:	d110      	bne.n	8004350 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	461a      	mov	r2, r3
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <USB_DevInit+0x2e8>)
 8004338:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	4619      	mov	r1, r3
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <USB_DevInit+0x2ec>)
 800434c:	4313      	orrs	r3, r2
 800434e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800435c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f043 0210 	orr.w	r2, r3, #16
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <USB_DevInit+0x2f0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f043 0208 	orr.w	r2, r3, #8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800438e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <USB_DevInit+0x2f4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ac:	b004      	add	sp, #16
 80043ae:	4770      	bx	lr
 80043b0:	00800100 	.word	0x00800100
 80043b4:	00010003 	.word	0x00010003
 80043b8:	803c3800 	.word	0x803c3800
 80043bc:	40000004 	.word	0x40000004

080043c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <USB_FlushTxFifo+0x48>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d0f0      	beq.n	80043da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	00030d40 	.word	0x00030d40

0800440c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2210      	movs	r2, #16
 800441c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3301      	adds	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <USB_FlushRxFifo+0x40>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e006      	b.n	800443e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b10      	cmp	r3, #16
 800443a:	d0f0      	beq.n	800441e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	00030d40 	.word	0x00030d40

08004450 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449c:	f043 0302 	orr.w	r3, r3, #2
 80044a0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80044a2:	2003      	movs	r0, #3
 80044a4:	f7fc f8ca 	bl	800063c <HAL_Delay>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a13      	ldr	r2, [pc, #76]	; (8004518 <USB_CoreReset+0x64>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e01b      	b.n	800450a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	daf2      	bge.n	80044c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <USB_CoreReset+0x64>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e006      	b.n	800450a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b01      	cmp	r3, #1
 8004506:	d0f0      	beq.n	80044ea <USB_CoreReset+0x36>

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	00030d40 	.word	0x00030d40

0800451c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800452a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800452e:	2b84      	cmp	r3, #132	; 0x84
 8004530:	d005      	beq.n	800453e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	3303      	adds	r3, #3
 800453c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800453e:	68fb      	ldr	r3, [r7, #12]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004550:	f000 fa62 	bl	8004a18 <vTaskStartScheduler>
  
  return osOK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	bd80      	pop	{r7, pc}

0800455a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800455a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455c:	b087      	sub	sp, #28
 800455e:	af02      	add	r7, sp, #8
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685c      	ldr	r4, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004570:	b29e      	uxth	r6, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ffcf 	bl	800451c <makeFreeRtosPriority>
 800457e:	4602      	mov	r2, r0
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	9200      	str	r2, [sp, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4632      	mov	r2, r6
 800458c:	4629      	mov	r1, r5
 800458e:	4620      	mov	r0, r4
 8004590:	f000 f8d2 	bl	8004738 <xTaskCreate>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800459e:	68fb      	ldr	r3, [r7, #12]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <osDelay+0x16>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	e000      	b.n	80045c0 <osDelay+0x18>
 80045be:	2301      	movs	r3, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f9f3 	bl	80049ac <vTaskDelay>
  
  return osOK;
 80045c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f103 0208 	add.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f103 0208 	add.w	r2, r3, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f103 0208 	add.w	r2, r3, #8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d103      	bne.n	8004692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e00c      	b.n	80046ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3308      	adds	r3, #8
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	e002      	b.n	80046a0 <vListInsert+0x2e>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d2f6      	bcs.n	800469a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6892      	ldr	r2, [r2, #8]
 80046fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6852      	ldr	r2, [r2, #4]
 8004704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d103      	bne.n	8004718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	1e5a      	subs	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08c      	sub	sp, #48	; 0x30
 800473c:	af04      	add	r7, sp, #16
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fe9b 	bl	8005488 <pvPortMalloc>
 8004752:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00e      	beq.n	8004778 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800475a:	2060      	movs	r0, #96	; 0x60
 800475c:	f000 fe94 	bl	8005488 <pvPortMalloc>
 8004760:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
 800476e:	e005      	b.n	800477c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f000 ff51 	bl	8005618 <vPortFree>
 8004776:	e001      	b.n	800477c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d013      	beq.n	80047aa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	2300      	movs	r3, #0
 8004786:	9303      	str	r3, [sp, #12]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	9302      	str	r3, [sp, #8]
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f80e 	bl	80047ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800479e:	69f8      	ldr	r0, [r7, #28]
 80047a0:	f000 f896 	bl	80048d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047a4:	2301      	movs	r3, #1
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	e002      	b.n	80047b0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047b0:	69bb      	ldr	r3, [r7, #24]
	}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	461a      	mov	r2, r3
 80047d2:	21a5      	movs	r1, #165	; 0xa5
 80047d4:	f002 f926 	bl	8006a24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80047e2:	440b      	add	r3, r1
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f023 0307 	bic.w	r3, r3, #7
 80047f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00b      	beq.n	8004814 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	b672      	cpsid	i
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	b662      	cpsie	i
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e7fe      	b.n	8004812 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e012      	b.n	8004840 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	7819      	ldrb	r1, [r3, #0]
 8004822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	3334      	adds	r3, #52	; 0x34
 800482a:	460a      	mov	r2, r1
 800482c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d006      	beq.n	8004848 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3301      	adds	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d9e9      	bls.n	800481a <prvInitialiseNewTask+0x60>
 8004846:	e000      	b.n	800484a <prvInitialiseNewTask+0x90>
		{
			break;
 8004848:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	2b06      	cmp	r3, #6
 8004856:	d901      	bls.n	800485c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004858:	2306      	movs	r3, #6
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004860:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004866:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	2200      	movs	r2, #0
 800486c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	3304      	adds	r3, #4
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fecc 	bl	8004610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	3318      	adds	r3, #24
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fec7 	bl	8004610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004886:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	f1c3 0207 	rsb	r2, r3, #7
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	2200      	movs	r2, #0
 800489c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	2200      	movs	r2, #0
 80048a2:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	69b8      	ldr	r0, [r7, #24]
 80048b2:	f000 fbff 	bl	80050b4 <pxPortInitialiseStack>
 80048b6:	4602      	mov	r2, r0
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048c8:	bf00      	nop
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048d8:	f000 fcf6 	bl	80052c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <prvAddNewTaskToReadyList+0xc0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <prvAddNewTaskToReadyList+0xc0>)
 80048e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <prvAddNewTaskToReadyList+0xc4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048ee:	4a29      	ldr	r2, [pc, #164]	; (8004994 <prvAddNewTaskToReadyList+0xc4>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048f4:	4b26      	ldr	r3, [pc, #152]	; (8004990 <prvAddNewTaskToReadyList+0xc0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d110      	bne.n	800491e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048fc:	f000 fad2 	bl	8004ea4 <prvInitialiseTaskLists>
 8004900:	e00d      	b.n	800491e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004902:	4b25      	ldr	r3, [pc, #148]	; (8004998 <prvAddNewTaskToReadyList+0xc8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <prvAddNewTaskToReadyList+0xc4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	429a      	cmp	r2, r3
 8004916:	d802      	bhi.n	800491e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004918:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <prvAddNewTaskToReadyList+0xc4>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800491e:	4b1f      	ldr	r3, [pc, #124]	; (800499c <prvAddNewTaskToReadyList+0xcc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <prvAddNewTaskToReadyList+0xcc>)
 8004926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004928:	4b1c      	ldr	r3, [pc, #112]	; (800499c <prvAddNewTaskToReadyList+0xcc>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <prvAddNewTaskToReadyList+0xd0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	4a18      	ldr	r2, [pc, #96]	; (80049a0 <prvAddNewTaskToReadyList+0xd0>)
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <prvAddNewTaskToReadyList+0xd4>)
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7ff fe66 	bl	800462a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800495e:	f000 fce5 	bl	800532c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <prvAddNewTaskToReadyList+0xc8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00e      	beq.n	8004988 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <prvAddNewTaskToReadyList+0xc4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d207      	bcs.n	8004988 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <prvAddNewTaskToReadyList+0xd8>)
 800497a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	2000018c 	.word	0x2000018c
 8004994:	2000008c 	.word	0x2000008c
 8004998:	20000198 	.word	0x20000198
 800499c:	200001a8 	.word	0x200001a8
 80049a0:	20000194 	.word	0x20000194
 80049a4:	20000090 	.word	0x20000090
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <vTaskDelay+0x64>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <vTaskDelay+0x32>
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	b672      	cpsid	i
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	b662      	cpsie	i
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	e7fe      	b.n	80049dc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80049de:	f000 f867 	bl	8004ab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049e2:	2100      	movs	r1, #0
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 faff 	bl	8004fe8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049ea:	f000 f86f 	bl	8004acc <xTaskResumeAll>
 80049ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d107      	bne.n	8004a06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <vTaskDelay+0x68>)
 80049f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200001b4 	.word	0x200001b4
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <vTaskStartScheduler+0x80>)
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	2300      	movs	r3, #0
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	491c      	ldr	r1, [pc, #112]	; (8004a9c <vTaskStartScheduler+0x84>)
 8004a2c:	481c      	ldr	r0, [pc, #112]	; (8004aa0 <vTaskStartScheduler+0x88>)
 8004a2e:	f7ff fe83 	bl	8004738 <xTaskCreate>
 8004a32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d119      	bne.n	8004a6e <vTaskStartScheduler+0x56>
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	b672      	cpsid	i
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	b662      	cpsie	i
 8004a4e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <vTaskStartScheduler+0x8c>)
 8004a52:	f04f 32ff 	mov.w	r2, #4294967295
 8004a56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a58:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <vTaskStartScheduler+0x90>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004a5e:	4b13      	ldr	r3, [pc, #76]	; (8004aac <vTaskStartScheduler+0x94>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004a64:	f000 fef0 	bl	8005848 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a68:	f000 fbb2 	bl	80051d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a6c:	e00f      	b.n	8004a8e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d10b      	bne.n	8004a8e <vTaskStartScheduler+0x76>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	b672      	cpsid	i
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	b662      	cpsie	i
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	e7fe      	b.n	8004a8c <vTaskStartScheduler+0x74>
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	200001b0 	.word	0x200001b0
 8004a9c:	08007814 	.word	0x08007814
 8004aa0:	08004e75 	.word	0x08004e75
 8004aa4:	200001ac 	.word	0x200001ac
 8004aa8:	20000198 	.word	0x20000198
 8004aac:	20000190 	.word	0x20000190

08004ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <vTaskSuspendAll+0x18>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <vTaskSuspendAll+0x18>)
 8004abc:	6013      	str	r3, [r2, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	200001b4 	.word	0x200001b4

08004acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ada:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <xTaskResumeAll+0x118>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <xTaskResumeAll+0x2e>
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	b672      	cpsid	i
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	b662      	cpsie	i
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	e7fe      	b.n	8004af8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004afa:	f000 fbe5 	bl	80052c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <xTaskResumeAll+0x118>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	4a37      	ldr	r2, [pc, #220]	; (8004be4 <xTaskResumeAll+0x118>)
 8004b06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b08:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <xTaskResumeAll+0x118>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d161      	bne.n	8004bd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <xTaskResumeAll+0x11c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05d      	beq.n	8004bd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b18:	e02e      	b.n	8004b78 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <xTaskResumeAll+0x120>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3318      	adds	r3, #24
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fddc 	bl	80046e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fdd7 	bl	80046e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <xTaskResumeAll+0x124>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <xTaskResumeAll+0x124>)
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <xTaskResumeAll+0x128>)
 8004b56:	441a      	add	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f7ff fd63 	bl	800462a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b68:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <xTaskResumeAll+0x12c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <xTaskResumeAll+0x130>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <xTaskResumeAll+0x120>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1cc      	bne.n	8004b1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b86:	f000 fa09 	bl	8004f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <xTaskResumeAll+0x134>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b96:	f000 f837 	bl	8004c08 <xTaskIncrementTick>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ba0:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <xTaskResumeAll+0x130>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f1      	bne.n	8004b96 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <xTaskResumeAll+0x134>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <xTaskResumeAll+0x130>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <xTaskResumeAll+0x138>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bd4:	f000 fbaa 	bl	800532c <vPortExitCritical>

	return xAlreadyYielded;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200001b4 	.word	0x200001b4
 8004be8:	2000018c 	.word	0x2000018c
 8004bec:	2000014c 	.word	0x2000014c
 8004bf0:	20000194 	.word	0x20000194
 8004bf4:	20000090 	.word	0x20000090
 8004bf8:	2000008c 	.word	0x2000008c
 8004bfc:	200001a0 	.word	0x200001a0
 8004c00:	2000019c 	.word	0x2000019c
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c12:	4b51      	ldr	r3, [pc, #324]	; (8004d58 <xTaskIncrementTick+0x150>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 808e 	bne.w	8004d38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c1c:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <xTaskIncrementTick+0x154>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c24:	4a4d      	ldr	r2, [pc, #308]	; (8004d5c <xTaskIncrementTick+0x154>)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d121      	bne.n	8004c74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <xTaskIncrementTick+0x158>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <xTaskIncrementTick+0x4a>
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	b672      	cpsid	i
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	b662      	cpsie	i
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	e7fe      	b.n	8004c50 <xTaskIncrementTick+0x48>
 8004c52:	4b43      	ldr	r3, [pc, #268]	; (8004d60 <xTaskIncrementTick+0x158>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	4b42      	ldr	r3, [pc, #264]	; (8004d64 <xTaskIncrementTick+0x15c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a40      	ldr	r2, [pc, #256]	; (8004d60 <xTaskIncrementTick+0x158>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4a40      	ldr	r2, [pc, #256]	; (8004d64 <xTaskIncrementTick+0x15c>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b40      	ldr	r3, [pc, #256]	; (8004d68 <xTaskIncrementTick+0x160>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	4a3e      	ldr	r2, [pc, #248]	; (8004d68 <xTaskIncrementTick+0x160>)
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	f000 f994 	bl	8004f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c74:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <xTaskIncrementTick+0x164>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d34d      	bcc.n	8004d1a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c7e:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <xTaskIncrementTick+0x158>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <xTaskIncrementTick+0x84>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <xTaskIncrementTick+0x86>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <xTaskIncrementTick+0x164>)
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	601a      	str	r2, [r3, #0]
					break;
 8004c9a:	e03e      	b.n	8004d1a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c9c:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <xTaskIncrementTick+0x158>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d203      	bcs.n	8004cbc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cb4:	4a2d      	ldr	r2, [pc, #180]	; (8004d6c <xTaskIncrementTick+0x164>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6013      	str	r3, [r2, #0]
						break;
 8004cba:	e02e      	b.n	8004d1a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fd0f 	bl	80046e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fd06 	bl	80046e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	2201      	movs	r2, #1
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <xTaskIncrementTick+0x168>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	4a22      	ldr	r2, [pc, #136]	; (8004d70 <xTaskIncrementTick+0x168>)
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <xTaskIncrementTick+0x16c>)
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7ff fc92 	bl	800462a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <xTaskIncrementTick+0x170>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d3b4      	bcc.n	8004c7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d18:	e7b1      	b.n	8004c7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d1a:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <xTaskIncrementTick+0x170>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4914      	ldr	r1, [pc, #80]	; (8004d74 <xTaskIncrementTick+0x16c>)
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d907      	bls.n	8004d42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e004      	b.n	8004d42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d38:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <xTaskIncrementTick+0x174>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <xTaskIncrementTick+0x174>)
 8004d40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d42:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <xTaskIncrementTick+0x178>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200001b4 	.word	0x200001b4
 8004d5c:	20000190 	.word	0x20000190
 8004d60:	20000144 	.word	0x20000144
 8004d64:	20000148 	.word	0x20000148
 8004d68:	200001a4 	.word	0x200001a4
 8004d6c:	200001ac 	.word	0x200001ac
 8004d70:	20000194 	.word	0x20000194
 8004d74:	20000090 	.word	0x20000090
 8004d78:	2000008c 	.word	0x2000008c
 8004d7c:	2000019c 	.word	0x2000019c
 8004d80:	200001a0 	.word	0x200001a0

08004d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d8a:	4b33      	ldr	r3, [pc, #204]	; (8004e58 <vTaskSwitchContext+0xd4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d92:	4b32      	ldr	r3, [pc, #200]	; (8004e5c <vTaskSwitchContext+0xd8>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d98:	e059      	b.n	8004e4e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8004d9a:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <vTaskSwitchContext+0xd8>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004da0:	f000 fd59 	bl	8005856 <getRunTimeCounterValue>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <vTaskSwitchContext+0xdc>)
 8004da8:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004daa:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <vTaskSwitchContext+0xdc>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <vTaskSwitchContext+0xe0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d909      	bls.n	8004dca <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004db6:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <vTaskSwitchContext+0xe4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dbc:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <vTaskSwitchContext+0xdc>)
 8004dbe:	6810      	ldr	r0, [r2, #0]
 8004dc0:	4a28      	ldr	r2, [pc, #160]	; (8004e64 <vTaskSwitchContext+0xe0>)
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	1a82      	subs	r2, r0, r2
 8004dc6:	440a      	add	r2, r1
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8004dca:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <vTaskSwitchContext+0xdc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <vTaskSwitchContext+0xe0>)
 8004dd0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004dd2:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <vTaskSwitchContext+0xe8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004de0:	7afb      	ldrb	r3, [r7, #11]
 8004de2:	f1c3 031f 	rsb	r3, r3, #31
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	4921      	ldr	r1, [pc, #132]	; (8004e70 <vTaskSwitchContext+0xec>)
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <vTaskSwitchContext+0x90>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	b672      	cpsid	i
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	b662      	cpsie	i
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	e7fe      	b.n	8004e12 <vTaskSwitchContext+0x8e>
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <vTaskSwitchContext+0xec>)
 8004e20:	4413      	add	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	3308      	adds	r3, #8
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d104      	bne.n	8004e44 <vTaskSwitchContext+0xc0>
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <vTaskSwitchContext+0xe4>)
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200001b4 	.word	0x200001b4
 8004e5c:	200001a0 	.word	0x200001a0
 8004e60:	200001bc 	.word	0x200001bc
 8004e64:	200001b8 	.word	0x200001b8
 8004e68:	2000008c 	.word	0x2000008c
 8004e6c:	20000194 	.word	0x20000194
 8004e70:	20000090 	.word	0x20000090

08004e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e7c:	f000 f852 	bl	8004f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <prvIdleTask+0x28>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d9f9      	bls.n	8004e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <prvIdleTask+0x2c>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e98:	e7f0      	b.n	8004e7c <prvIdleTask+0x8>
 8004e9a:	bf00      	nop
 8004e9c:	20000090 	.word	0x20000090
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eaa:	2300      	movs	r3, #0
 8004eac:	607b      	str	r3, [r7, #4]
 8004eae:	e00c      	b.n	8004eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <prvInitialiseTaskLists+0x60>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fb86 	bl	80045d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b06      	cmp	r3, #6
 8004ece:	d9ef      	bls.n	8004eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ed0:	480d      	ldr	r0, [pc, #52]	; (8004f08 <prvInitialiseTaskLists+0x64>)
 8004ed2:	f7ff fb7d 	bl	80045d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ed6:	480d      	ldr	r0, [pc, #52]	; (8004f0c <prvInitialiseTaskLists+0x68>)
 8004ed8:	f7ff fb7a 	bl	80045d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004edc:	480c      	ldr	r0, [pc, #48]	; (8004f10 <prvInitialiseTaskLists+0x6c>)
 8004ede:	f7ff fb77 	bl	80045d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ee2:	480c      	ldr	r0, [pc, #48]	; (8004f14 <prvInitialiseTaskLists+0x70>)
 8004ee4:	f7ff fb74 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ee8:	480b      	ldr	r0, [pc, #44]	; (8004f18 <prvInitialiseTaskLists+0x74>)
 8004eea:	f7ff fb71 	bl	80045d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004eee:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <prvInitialiseTaskLists+0x78>)
 8004ef0:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <prvInitialiseTaskLists+0x64>)
 8004ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <prvInitialiseTaskLists+0x7c>)
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <prvInitialiseTaskLists+0x68>)
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000090 	.word	0x20000090
 8004f08:	2000011c 	.word	0x2000011c
 8004f0c:	20000130 	.word	0x20000130
 8004f10:	2000014c 	.word	0x2000014c
 8004f14:	20000160 	.word	0x20000160
 8004f18:	20000178 	.word	0x20000178
 8004f1c:	20000144 	.word	0x20000144
 8004f20:	20000148 	.word	0x20000148

08004f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f2a:	e019      	b.n	8004f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f2c:	f000 f9cc 	bl	80052c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <prvCheckTasksWaitingTermination+0x4c>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fbd1 	bl	80046e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <prvCheckTasksWaitingTermination+0x50>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	4a0a      	ldr	r2, [pc, #40]	; (8004f74 <prvCheckTasksWaitingTermination+0x50>)
 8004f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <prvCheckTasksWaitingTermination+0x54>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <prvCheckTasksWaitingTermination+0x54>)
 8004f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f56:	f000 f9e9 	bl	800532c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f80e 	bl	8004f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <prvCheckTasksWaitingTermination+0x54>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e1      	bne.n	8004f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000160 	.word	0x20000160
 8004f74:	2000018c 	.word	0x2000018c
 8004f78:	20000174 	.word	0x20000174

08004f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fb45 	bl	8005618 <vPortFree>
			vPortFree( pxTCB );
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fb42 	bl	8005618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <prvResetNextTaskUnblockTime+0x44>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <prvResetNextTaskUnblockTime+0x14>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <prvResetNextTaskUnblockTime+0x16>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <prvResetNextTaskUnblockTime+0x48>)
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fbe:	e008      	b.n	8004fd2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <prvResetNextTaskUnblockTime+0x44>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a05      	ldr	r2, [pc, #20]	; (8004fe4 <prvResetNextTaskUnblockTime+0x48>)
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000144 	.word	0x20000144
 8004fe4:	200001ac 	.word	0x200001ac

08004fe8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ff2:	4b29      	ldr	r3, [pc, #164]	; (8005098 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fb70 	bl	80046e4 <uxListRemove>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <prvAddCurrentTaskToDelayedList+0xb4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	2201      	movs	r2, #1
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4013      	ands	r3, r2
 800501e:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005020:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d10a      	bne.n	8005040 <prvAddCurrentTaskToDelayedList+0x58>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005030:	4b1a      	ldr	r3, [pc, #104]	; (800509c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3304      	adds	r3, #4
 8005036:	4619      	mov	r1, r3
 8005038:	481a      	ldr	r0, [pc, #104]	; (80050a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800503a:	f7ff faf6 	bl	800462a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800503e:	e026      	b.n	800508e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005048:	4b14      	ldr	r3, [pc, #80]	; (800509c <prvAddCurrentTaskToDelayedList+0xb4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	429a      	cmp	r2, r3
 8005056:	d209      	bcs.n	800506c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <prvAddCurrentTaskToDelayedList+0xb4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7ff fb04 	bl	8004672 <vListInsert>
}
 800506a:	e010      	b.n	800508e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7ff fafa 	bl	8004672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	d202      	bcs.n	800508e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6013      	str	r3, [r2, #0]
}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000190 	.word	0x20000190
 800509c:	2000008c 	.word	0x2000008c
 80050a0:	20000194 	.word	0x20000194
 80050a4:	20000178 	.word	0x20000178
 80050a8:	20000148 	.word	0x20000148
 80050ac:	20000144 	.word	0x20000144
 80050b0:	200001ac 	.word	0x200001ac

080050b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3b04      	subs	r3, #4
 80050c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3b04      	subs	r3, #4
 80050e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050e4:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <pxPortInitialiseStack+0x64>)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3b14      	subs	r3, #20
 80050ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3b04      	subs	r3, #4
 80050fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f06f 0202 	mvn.w	r2, #2
 8005102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3b20      	subs	r3, #32
 8005108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	0800511d 	.word	0x0800511d

0800511c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <prvTaskExitError+0x58>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d00b      	beq.n	8005148 <prvTaskExitError+0x2c>
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	b672      	cpsid	i
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	b662      	cpsie	i
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	e7fe      	b.n	8005146 <prvTaskExitError+0x2a>
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	b672      	cpsid	i
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	b662      	cpsie	i
 800515c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800515e:	bf00      	nop
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0fc      	beq.n	8005160 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005166:	bf00      	nop
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000004 	.word	0x20000004
	...

08005180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <pxCurrentTCBConst2>)
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	6808      	ldr	r0, [r1, #0]
 8005186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	f380 8809 	msr	PSP, r0
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8811 	msr	BASEPRI, r0
 800519a:	4770      	bx	lr
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst2>:
 80051a0:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051a8:	4808      	ldr	r0, [pc, #32]	; (80051cc <prvPortStartFirstTask+0x24>)
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	f380 8808 	msr	MSP, r0
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f380 8814 	msr	CONTROL, r0
 80051ba:	b662      	cpsie	i
 80051bc:	b661      	cpsie	f
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	df00      	svc	0
 80051c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051ca:	bf00      	nop
 80051cc:	e000ed08 	.word	0xe000ed08

080051d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051d6:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <xPortStartScheduler+0xe0>)
 80051d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	22ff      	movs	r2, #255	; 0xff
 80051e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4b2e      	ldr	r3, [pc, #184]	; (80052b4 <xPortStartScheduler+0xe4>)
 80051fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051fe:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <xPortStartScheduler+0xe8>)
 8005200:	2207      	movs	r2, #7
 8005202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005204:	e009      	b.n	800521a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005206:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <xPortStartScheduler+0xe8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <xPortStartScheduler+0xe8>)
 800520e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	b2db      	uxtb	r3, r3
 8005218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d0ef      	beq.n	8005206 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <xPortStartScheduler+0xe8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1c3 0307 	rsb	r3, r3, #7
 800522e:	2b04      	cmp	r3, #4
 8005230:	d00b      	beq.n	800524a <xPortStartScheduler+0x7a>
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	e7fe      	b.n	8005248 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800524a:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <xPortStartScheduler+0xe8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <xPortStartScheduler+0xe8>)
 8005252:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005254:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <xPortStartScheduler+0xe8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800525c:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <xPortStartScheduler+0xe8>)
 800525e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005268:	4b14      	ldr	r3, [pc, #80]	; (80052bc <xPortStartScheduler+0xec>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <xPortStartScheduler+0xec>)
 800526e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005272:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <xPortStartScheduler+0xec>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a10      	ldr	r2, [pc, #64]	; (80052bc <xPortStartScheduler+0xec>)
 800527a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800527e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005280:	f000 f8d4 	bl	800542c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <xPortStartScheduler+0xf0>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800528a:	f000 f8f3 	bl	8005474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <xPortStartScheduler+0xf4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <xPortStartScheduler+0xf4>)
 8005294:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005298:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800529a:	f7ff ff85 	bl	80051a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800529e:	f7ff fd71 	bl	8004d84 <vTaskSwitchContext>
	prvTaskExitError();
 80052a2:	f7ff ff3b 	bl	800511c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	e000e400 	.word	0xe000e400
 80052b4:	200001c0 	.word	0x200001c0
 80052b8:	200001c4 	.word	0x200001c4
 80052bc:	e000ed20 	.word	0xe000ed20
 80052c0:	20000004 	.word	0x20000004
 80052c4:	e000ef34 	.word	0xe000ef34

080052c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	b672      	cpsid	i
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	b662      	cpsie	i
 80052e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <vPortEnterCritical+0x5c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <vPortEnterCritical+0x5c>)
 80052ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <vPortEnterCritical+0x5c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d110      	bne.n	8005318 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <vPortEnterCritical+0x60>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00b      	beq.n	8005318 <vPortEnterCritical+0x50>
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	b672      	cpsid	i
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	b662      	cpsie	i
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	e7fe      	b.n	8005316 <vPortEnterCritical+0x4e>
	}
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20000004 	.word	0x20000004
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <vPortExitCritical+0x26>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	b672      	cpsid	i
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	b662      	cpsie	i
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	e7fe      	b.n	8005350 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005352:	4b0a      	ldr	r3, [pc, #40]	; (800537c <vPortExitCritical+0x50>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	4a08      	ldr	r2, [pc, #32]	; (800537c <vPortExitCritical+0x50>)
 800535a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <vPortExitCritical+0x50>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <vPortExitCritical+0x42>
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000004 	.word	0x20000004

08005380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005380:	f3ef 8009 	mrs	r0, PSP
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <pxCurrentTCBConst>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f01e 0f10 	tst.w	lr, #16
 8005390:	bf08      	it	eq
 8005392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053a4:	b672      	cpsid	i
 80053a6:	f380 8811 	msr	BASEPRI, r0
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	b662      	cpsie	i
 80053b4:	f7ff fce6 	bl	8004d84 <vTaskSwitchContext>
 80053b8:	f04f 0000 	mov.w	r0, #0
 80053bc:	f380 8811 	msr	BASEPRI, r0
 80053c0:	bc09      	pop	{r0, r3}
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f01e 0f10 	tst.w	lr, #16
 80053ce:	bf08      	it	eq
 80053d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053d4:	f380 8809 	msr	PSP, r0
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop

080053e0 <pxCurrentTCBConst>:
 80053e0:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	b672      	cpsid	i
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	b662      	cpsie	i
 8005402:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005404:	f7ff fc00 	bl	8004c08 <xTaskIncrementTick>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <SysTick_Handler+0x40>)
 8005410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	2300      	movs	r3, #0
 8005418:	603b      	str	r3, [r7, #0]
	__asm volatile
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005436:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <vPortSetupTimerInterrupt+0x38>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <vPortSetupTimerInterrupt+0x3c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0a      	ldr	r2, [pc, #40]	; (800546c <vPortSetupTimerInterrupt+0x40>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a09      	ldr	r2, [pc, #36]	; (8005470 <vPortSetupTimerInterrupt+0x44>)
 800544a:	3b01      	subs	r3, #1
 800544c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800544e:	4b04      	ldr	r3, [pc, #16]	; (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005450:	2207      	movs	r2, #7
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e010 	.word	0xe000e010
 8005464:	e000e018 	.word	0xe000e018
 8005468:	20000008 	.word	0x20000008
 800546c:	10624dd3 	.word	0x10624dd3
 8005470:	e000e014 	.word	0xe000e014

08005474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005484 <vPortEnableVFP+0x10>
 8005478:	6801      	ldr	r1, [r0, #0]
 800547a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800547e:	6001      	str	r1, [r0, #0]
 8005480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005482:	bf00      	nop
 8005484:	e000ed88 	.word	0xe000ed88

08005488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005494:	f7ff fb0c 	bl	8004ab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005498:	4b5a      	ldr	r3, [pc, #360]	; (8005604 <pvPortMalloc+0x17c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054a0:	f000 f916 	bl	80056d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054a4:	4b58      	ldr	r3, [pc, #352]	; (8005608 <pvPortMalloc+0x180>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 8090 	bne.w	80055d2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01e      	beq.n	80054f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80054b8:	2208      	movs	r2, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d015      	beq.n	80054f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	3308      	adds	r3, #8
 80054d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <pvPortMalloc+0x6e>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	b672      	cpsid	i
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	b662      	cpsie	i
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e7fe      	b.n	80054f4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d06a      	beq.n	80055d2 <pvPortMalloc+0x14a>
 80054fc:	4b43      	ldr	r3, [pc, #268]	; (800560c <pvPortMalloc+0x184>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d865      	bhi.n	80055d2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005506:	4b42      	ldr	r3, [pc, #264]	; (8005610 <pvPortMalloc+0x188>)
 8005508:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800550a:	4b41      	ldr	r3, [pc, #260]	; (8005610 <pvPortMalloc+0x188>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005510:	e004      	b.n	800551c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d903      	bls.n	800552e <pvPortMalloc+0xa6>
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f1      	bne.n	8005512 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800552e:	4b35      	ldr	r3, [pc, #212]	; (8005604 <pvPortMalloc+0x17c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	429a      	cmp	r2, r3
 8005536:	d04c      	beq.n	80055d2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	4413      	add	r3, r2
 8005540:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	2308      	movs	r3, #8
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	429a      	cmp	r2, r3
 8005558:	d920      	bls.n	800559c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800555a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <pvPortMalloc+0xfc>
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	b672      	cpsid	i
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	b662      	cpsie	i
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e7fe      	b.n	8005582 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	1ad2      	subs	r2, r2, r3
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005596:	69b8      	ldr	r0, [r7, #24]
 8005598:	f000 f8fc 	bl	8005794 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <pvPortMalloc+0x184>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	4a19      	ldr	r2, [pc, #100]	; (800560c <pvPortMalloc+0x184>)
 80055a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <pvPortMalloc+0x184>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b19      	ldr	r3, [pc, #100]	; (8005614 <pvPortMalloc+0x18c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d203      	bcs.n	80055be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <pvPortMalloc+0x184>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a16      	ldr	r2, [pc, #88]	; (8005614 <pvPortMalloc+0x18c>)
 80055bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4b11      	ldr	r3, [pc, #68]	; (8005608 <pvPortMalloc+0x180>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055d2:	f7ff fa7b 	bl	8004acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <pvPortMalloc+0x170>
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	b672      	cpsid	i
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	b662      	cpsie	i
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	e7fe      	b.n	80055f6 <pvPortMalloc+0x16e>
	return pvReturn;
 80055f8:	69fb      	ldr	r3, [r7, #28]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20003dd0 	.word	0x20003dd0
 8005608:	20003ddc 	.word	0x20003ddc
 800560c:	20003dd4 	.word	0x20003dd4
 8005610:	20003dc8 	.word	0x20003dc8
 8005614:	20003dd8 	.word	0x20003dd8

08005618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d04a      	beq.n	80056c0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800562a:	2308      	movs	r3, #8
 800562c:	425b      	negs	r3, r3
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <vPortFree+0xb0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <vPortFree+0x46>
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	b672      	cpsid	i
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	b662      	cpsie	i
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e7fe      	b.n	800565c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <vPortFree+0x66>
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	b672      	cpsid	i
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	b662      	cpsie	i
 800567a:	60bb      	str	r3, [r7, #8]
 800567c:	e7fe      	b.n	800567c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <vPortFree+0xb0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4013      	ands	r3, r2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d115      	bne.n	80056c0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <vPortFree+0xb0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	43db      	mvns	r3, r3
 800569e:	401a      	ands	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056a4:	f7ff fa04 	bl	8004ab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <vPortFree+0xb4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	4a06      	ldr	r2, [pc, #24]	; (80056cc <vPortFree+0xb4>)
 80056b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f000 f86c 	bl	8005794 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056bc:	f7ff fa06 	bl	8004acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20003ddc 	.word	0x20003ddc
 80056cc:	20003dd4 	.word	0x20003dd4

080056d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056d6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <prvHeapInit+0xac>)
 80056de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00c      	beq.n	8005704 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3307      	adds	r3, #7
 80056ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	4a1f      	ldr	r2, [pc, #124]	; (800577c <prvHeapInit+0xac>)
 8005700:	4413      	add	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005708:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <prvHeapInit+0xb0>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800570e:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <prvHeapInit+0xb0>)
 8005710:	2200      	movs	r2, #0
 8005712:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4413      	add	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800571c:	2208      	movs	r2, #8
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a15      	ldr	r2, [pc, #84]	; (8005784 <prvHeapInit+0xb4>)
 8005730:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005732:	4b14      	ldr	r3, [pc, #80]	; (8005784 <prvHeapInit+0xb4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <prvHeapInit+0xb4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <prvHeapInit+0xb4>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <prvHeapInit+0xb8>)
 800575e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a09      	ldr	r2, [pc, #36]	; (800578c <prvHeapInit+0xbc>)
 8005766:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005768:	4b09      	ldr	r3, [pc, #36]	; (8005790 <prvHeapInit+0xc0>)
 800576a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800576e:	601a      	str	r2, [r3, #0]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	200001c8 	.word	0x200001c8
 8005780:	20003dc8 	.word	0x20003dc8
 8005784:	20003dd0 	.word	0x20003dd0
 8005788:	20003dd8 	.word	0x20003dd8
 800578c:	20003dd4 	.word	0x20003dd4
 8005790:	20003ddc 	.word	0x20003ddc

08005794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800579c:	4b28      	ldr	r3, [pc, #160]	; (8005840 <prvInsertBlockIntoFreeList+0xac>)
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e002      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x14>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d8f7      	bhi.n	80057a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	4413      	add	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d108      	bne.n	80057d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	441a      	add	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	441a      	add	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d118      	bne.n	800581c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <prvInsertBlockIntoFreeList+0xb0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d00d      	beq.n	8005812 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e008      	b.n	8005824 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005812:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <prvInsertBlockIntoFreeList+0xb0>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e003      	b.n	8005824 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d002      	beq.n	8005832 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20003dc8 	.word	0x20003dc8
 8005844:	20003dd0 	.word	0x20003dd0

08005848 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0

}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0
return 0;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800586e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005872:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d013      	beq.n	80058a6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800587e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005882:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005886:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800588e:	e000      	b.n	8005892 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005890:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005892:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f9      	beq.n	8005890 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800589c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80058a6:	687b      	ldr	r3, [r7, #4]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <_write>:
void Startblink03(void const * argument);
void StartTask_I2C(void const * argument);

/* USER CODE BEGIN PFP */

int _write(int file,char *ptr,int len){
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
	int i=0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e009      	b.n	80058de <_write+0x2a>
		ITM_SendChar((*ptr++));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	60ba      	str	r2, [r7, #8]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff ffc7 	bl	8005866 <ITM_SendChar>
	for(i=0;i<len;i++)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	3301      	adds	r3, #1
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	dbf1      	blt.n	80058ca <_write+0x16>
	return len;
 80058e6:	687b      	ldr	r3, [r7, #4]

}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058f0:	b5b0      	push	{r4, r5, r7, lr}
 80058f2:	b094      	sub	sp, #80	; 0x50
 80058f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058f6:	f7fa fe73 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058fa:	f000 f85f 	bl	80059bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058fe:	f000 f9c9 	bl	8005c94 <MX_GPIO_Init>
  MX_ETH_Init();
 8005902:	f000 f8f3 	bl	8005aec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8005906:	f000 f967 	bl	8005bd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800590a:	f000 f995 	bl	8005c38 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800590e:	f000 f923 	bl	8005b58 <MX_I2C1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, Startblink01, osPriorityNormal, 0, 128);
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <main+0xac>)
 8005914:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005918:	461d      	mov	r5, r3
 800591a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800591c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	6023      	str	r3, [r4, #0]
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 8005922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005926:	2100      	movs	r1, #0
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fe16 	bl	800455a <osThreadCreate>
 800592e:	4602      	mov	r2, r0
 8005930:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <main+0xb0>)
 8005932:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink02 */
  osThreadDef(blink02, Startblink02, osPriorityBelowNormal, 0, 128);
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <main+0xb4>)
 8005936:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800593a:	461d      	mov	r5, r3
 800593c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800593e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	6023      	str	r3, [r4, #0]
  blink02Handle = osThreadCreate(osThread(blink02), NULL);
 8005944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005948:	2100      	movs	r1, #0
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fe05 	bl	800455a <osThreadCreate>
 8005950:	4602      	mov	r2, r0
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <main+0xb8>)
 8005954:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink03 */
  osThreadDef(blink03, Startblink03, osPriorityIdle, 0, 128);
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <main+0xbc>)
 8005958:	f107 0414 	add.w	r4, r7, #20
 800595c:	461d      	mov	r5, r3
 800595e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	6023      	str	r3, [r4, #0]
  blink03Handle = osThreadCreate(osThread(blink03), NULL);
 8005966:	f107 0314 	add.w	r3, r7, #20
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fdf4 	bl	800455a <osThreadCreate>
 8005972:	4602      	mov	r2, r0
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <main+0xc0>)
 8005976:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2C */
  osThreadDef(I2C, StartTask_I2C, osPriorityAboveNormal, 0, 128);
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <main+0xc4>)
 800597a:	463c      	mov	r4, r7
 800597c:	461d      	mov	r5, r3
 800597e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	6023      	str	r3, [r4, #0]
  I2CHandle = osThreadCreate(osThread(I2C), NULL);
 8005986:	463b      	mov	r3, r7
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fde5 	bl	800455a <osThreadCreate>
 8005990:	4602      	mov	r2, r0
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <main+0xc8>)
 8005994:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005996:	f7fe fdd9 	bl	800454c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800599a:	e7fe      	b.n	800599a <main+0xaa>
 800599c:	08007824 	.word	0x08007824
 80059a0:	200046d4 	.word	0x200046d4
 80059a4:	08007840 	.word	0x08007840
 80059a8:	20004720 	.word	0x20004720
 80059ac:	0800785c 	.word	0x0800785c
 80059b0:	200046d0 	.word	0x200046d0
 80059b4:	08007874 	.word	0x08007874
 80059b8:	200046cc 	.word	0x200046cc

080059bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b0b8      	sub	sp, #224	; 0xe0
 80059c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80059c6:	2234      	movs	r2, #52	; 0x34
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f82a 	bl	8006a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059e0:	f107 0308 	add.w	r3, r7, #8
 80059e4:	2290      	movs	r2, #144	; 0x90
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 f81b 	bl	8006a24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80059ee:	f7fc fb47 	bl	8002080 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059f2:	4b3b      	ldr	r3, [pc, #236]	; (8005ae0 <SystemClock_Config+0x124>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a3a      	ldr	r2, [pc, #232]	; (8005ae0 <SystemClock_Config+0x124>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
 80059fe:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <SystemClock_Config+0x124>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <SystemClock_Config+0x128>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <SystemClock_Config+0x128>)
 8005a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	4b33      	ldr	r3, [pc, #204]	; (8005ae4 <SystemClock_Config+0x128>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005a28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a30:	2302      	movs	r3, #2
 8005a32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005a3e:	2304      	movs	r3, #4
 8005a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005a44:	23d8      	movs	r3, #216	; 0xd8
 8005a46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8005a50:	2309      	movs	r3, #9
 8005a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fc fb70 	bl	8002140 <HAL_RCC_OscConfig>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005a66:	f000 fa23 	bl	8005eb0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005a6a:	f7fc fb19 	bl	80020a0 <HAL_PWREx_EnableOverDrive>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005a74:	f000 fa1c 	bl	8005eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a78:	230f      	movs	r3, #15
 8005a7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005a9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a9e:	2107      	movs	r1, #7
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fc fdbf 	bl	8002624 <HAL_RCC_ClockConfig>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8005aac:	f000 fa00 	bl	8005eb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <SystemClock_Config+0x12c>)
 8005ab2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ac2:	f107 0308 	add.w	r3, r7, #8
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fc ffd2 	bl	8002a70 <HAL_RCCEx_PeriphCLKConfig>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8005ad2:	f000 f9ed 	bl	8005eb0 <Error_Handler>
  }
}
 8005ad6:	bf00      	nop
 8005ad8:	37e0      	adds	r7, #224	; 0xe0
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40007000 	.word	0x40007000
 8005ae8:	00204100 	.word	0x00204100

08005aec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8005af2:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <MX_ETH_Init+0x64>)
 8005af4:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <MX_ETH_Init+0x68>)
 8005af6:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005af8:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <MX_ETH_Init+0x64>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <MX_ETH_Init+0x64>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005b04:	2300      	movs	r3, #0
 8005b06:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8005b0c:	23e1      	movs	r3, #225	; 0xe1
 8005b0e:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8005b10:	2300      	movs	r3, #0
 8005b12:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8005b14:	2300      	movs	r3, #0
 8005b16:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <MX_ETH_Init+0x64>)
 8005b1e:	463b      	mov	r3, r7
 8005b20:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <MX_ETH_Init+0x64>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <MX_ETH_Init+0x64>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005b2e:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <MX_ETH_Init+0x64>)
 8005b30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b34:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005b36:	4806      	ldr	r0, [pc, #24]	; (8005b50 <MX_ETH_Init+0x64>)
 8005b38:	f7fa fe84 	bl	8000844 <HAL_ETH_Init>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8005b42:	f000 f9b5 	bl	8005eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200046d8 	.word	0x200046d8
 8005b54:	40028000 	.word	0x40028000

08005b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <MX_I2C1_Init+0x78>)
 8005b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8005b62:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b64:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <MX_I2C1_Init+0x7c>)
 8005b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005b68:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b6e:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b92:	480e      	ldr	r0, [pc, #56]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005b94:	f7fb fca0 	bl	80014d8 <HAL_I2C_Init>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005b9e:	f000 f987 	bl	8005eb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4809      	ldr	r0, [pc, #36]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005ba6:	f7fc f897 	bl	8001cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005bb0:	f000 f97e 	bl	8005eb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4805      	ldr	r0, [pc, #20]	; (8005bcc <MX_I2C1_Init+0x74>)
 8005bb8:	f7fc f8d9 	bl	8001d6e <HAL_I2CEx_ConfigDigitalFilter>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005bc2:	f000 f975 	bl	8005eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000427c 	.word	0x2000427c
 8005bd0:	40005400 	.word	0x40005400
 8005bd4:	6000030d 	.word	0x6000030d

08005bd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005bdc:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <MX_USART3_UART_Init+0x5c>)
 8005be0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005be8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005bfe:	220c      	movs	r2, #12
 8005c00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c08:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005c1a:	4805      	ldr	r0, [pc, #20]	; (8005c30 <MX_USART3_UART_Init+0x58>)
 8005c1c:	f7fd fdb4 	bl	8003788 <HAL_UART_Init>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005c26:	f000 f943 	bl	8005eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200041fc 	.word	0x200041fc
 8005c34:	40004800 	.word	0x40004800

08005c38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005c3c:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005c42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005c44:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c46:	2206      	movs	r2, #6
 8005c48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005c56:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c58:	2202      	movs	r2, #2
 8005c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005c7a:	4805      	ldr	r0, [pc, #20]	; (8005c90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005c7c:	f7fc f8c3 	bl	8001e06 <HAL_PCD_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005c86:	f000 f913 	bl	8005eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005c8a:	bf00      	nop
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200042c8 	.word	0x200042c8

08005c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	; 0x30
 8005c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c9a:	f107 031c 	add.w	r3, r7, #28
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005caa:	4b46      	ldr	r3, [pc, #280]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	4a45      	ldr	r2, [pc, #276]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cb0:	f043 0304 	orr.w	r3, r3, #4
 8005cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005cb6:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	61bb      	str	r3, [r7, #24]
 8005cc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cc2:	4b40      	ldr	r3, [pc, #256]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	4a3f      	ldr	r2, [pc, #252]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cce:	4b3d      	ldr	r3, [pc, #244]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cda:	4b3a      	ldr	r3, [pc, #232]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	4a39      	ldr	r2, [pc, #228]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce6:	4b37      	ldr	r3, [pc, #220]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cf2:	4b34      	ldr	r3, [pc, #208]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	4a33      	ldr	r2, [pc, #204]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005cf8:	f043 0302 	orr.w	r3, r3, #2
 8005cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfe:	4b31      	ldr	r3, [pc, #196]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d0a:	4b2e      	ldr	r3, [pc, #184]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005d10:	f043 0308 	orr.w	r3, r3, #8
 8005d14:	6313      	str	r3, [r2, #48]	; 0x30
 8005d16:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d22:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d2e:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <MX_GPIO_Init+0x130>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8005d40:	4821      	ldr	r0, [pc, #132]	; (8005dc8 <MX_GPIO_Init+0x134>)
 8005d42:	f7fb fb95 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005d46:	2200      	movs	r2, #0
 8005d48:	2140      	movs	r1, #64	; 0x40
 8005d4a:	4820      	ldr	r0, [pc, #128]	; (8005dcc <MX_GPIO_Init+0x138>)
 8005d4c:	f7fb fb90 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d56:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <MX_GPIO_Init+0x13c>)
 8005d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005d5e:	f107 031c 	add.w	r3, r7, #28
 8005d62:	4619      	mov	r1, r3
 8005d64:	481b      	ldr	r0, [pc, #108]	; (8005dd4 <MX_GPIO_Init+0x140>)
 8005d66:	f7fb f9d9 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005d6a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8005d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d70:	2301      	movs	r3, #1
 8005d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7c:	f107 031c 	add.w	r3, r7, #28
 8005d80:	4619      	mov	r1, r3
 8005d82:	4811      	ldr	r0, [pc, #68]	; (8005dc8 <MX_GPIO_Init+0x134>)
 8005d84:	f7fb f9ca 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005d88:	2340      	movs	r3, #64	; 0x40
 8005d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d94:	2300      	movs	r3, #0
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005d98:	f107 031c 	add.w	r3, r7, #28
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	480b      	ldr	r0, [pc, #44]	; (8005dcc <MX_GPIO_Init+0x138>)
 8005da0:	f7fb f9bc 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005da8:	2300      	movs	r3, #0
 8005daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005db0:	f107 031c 	add.w	r3, r7, #28
 8005db4:	4619      	mov	r1, r3
 8005db6:	4805      	ldr	r0, [pc, #20]	; (8005dcc <MX_GPIO_Init+0x138>)
 8005db8:	f7fb f9b0 	bl	800111c <HAL_GPIO_Init>

}
 8005dbc:	bf00      	nop
 8005dbe:	3730      	adds	r7, #48	; 0x30
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40020400 	.word	0x40020400
 8005dcc:	40021800 	.word	0x40021800
 8005dd0:	10110000 	.word	0x10110000
 8005dd4:	40020800 	.word	0x40020800

08005dd8 <Startblink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Startblink01 */
void Startblink01(void const * argument)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	count++;
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <Startblink01+0x28>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <Startblink01+0x28>)
 8005dea:	701a      	strb	r2, [r3, #0]
	printf("FRAN PEREA EL QUE LO LEA=%d \n",count);
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <Startblink01+0x28>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	4619      	mov	r1, r3
 8005df2:	4804      	ldr	r0, [pc, #16]	; (8005e04 <Startblink01+0x2c>)
 8005df4:	f000 fe1e 	bl	8006a34 <iprintf>
    osDelay(100);
 8005df8:	2064      	movs	r0, #100	; 0x64
 8005dfa:	f7fe fbd5 	bl	80045a8 <osDelay>
	count++;
 8005dfe:	e7ef      	b.n	8005de0 <Startblink01+0x8>
 8005e00:	20003de0 	.word	0x20003de0
 8005e04:	08007888 	.word	0x08007888

08005e08 <Startblink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startblink02 */
void Startblink02(void const * argument)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startblink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	4803      	ldr	r0, [pc, #12]	; (8005e20 <Startblink02+0x18>)
 8005e14:	f7fb fb45 	bl	80014a2 <HAL_GPIO_TogglePin>
    osDelay(100);
 8005e18:	2064      	movs	r0, #100	; 0x64
 8005e1a:	f7fe fbc5 	bl	80045a8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8005e1e:	e7f7      	b.n	8005e10 <Startblink02+0x8>
 8005e20:	40020400 	.word	0x40020400

08005e24 <Startblink03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startblink03 */
void Startblink03(void const * argument)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startblink03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8005e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e30:	4803      	ldr	r0, [pc, #12]	; (8005e40 <Startblink03+0x1c>)
 8005e32:	f7fb fb36 	bl	80014a2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8005e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e3a:	f7fe fbb5 	bl	80045a8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8005e3e:	e7f5      	b.n	8005e2c <Startblink03+0x8>
 8005e40:	40020400 	.word	0x40020400

08005e44 <StartTask_I2C>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_I2C */
void StartTask_I2C(void const * argument)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_I2C */
	SSD1306_Init();
 8005e4c:	f000 f89e 	bl	8005f8c <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005e50:	2000      	movs	r0, #0
 8005e52:	f000 f98d 	bl	8006170 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8005e56:	f000 f95d 	bl	8006114 <SSD1306_UpdateScreen>
	SSD1306_GotoXY(10,10);
 8005e5a:	210a      	movs	r1, #10
 8005e5c:	200a      	movs	r0, #10
 8005e5e:	f000 f9ff 	bl	8006260 <SSD1306_GotoXY>

	char buf[10];
	char oldbuf[10];

	uint16_t i=0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	83fb      	strh	r3, [r7, #30]
//	  strncpy(oldbuf, buf, 10);
//	  SSD1306_Puts(buf,&Font_7x10,SSD1306_COLOR_WHITE);
//	  SSD1306_UpdateScreen();
//    osDelay(10);
//    i++;
	  SSD1306_DrawBitmap(0,0,ojete,128,64,1);
 8005e66:	2301      	movs	r3, #1
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	2340      	movs	r3, #64	; 0x40
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	4a05      	ldr	r2, [pc, #20]	; (8005e88 <StartTask_I2C+0x44>)
 8005e72:	2100      	movs	r1, #0
 8005e74:	2000      	movs	r0, #0
 8005e76:	f000 f822 	bl	8005ebe <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8005e7a:	f000 f94b 	bl	8006114 <SSD1306_UpdateScreen>
	  osDelay(1000);
 8005e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e82:	f7fe fb91 	bl	80045a8 <osDelay>
	  SSD1306_DrawBitmap(0,0,ojete,128,64,1);
 8005e86:	e7ee      	b.n	8005e66 <StartTask_I2C+0x22>
 8005e88:	080078a8 	.word	0x080078a8

08005e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a04      	ldr	r2, [pc, #16]	; (8005eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005e9e:	f7fa fbad 	bl	80005fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40001400 	.word	0x40001400

08005eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60ba      	str	r2, [r7, #8]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4603      	mov	r3, r0
 8005eca:	81fb      	strh	r3, [r7, #14]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	81bb      	strh	r3, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8005ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed8:	3307      	adds	r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	da00      	bge.n	8005ee0 <SSD1306_DrawBitmap+0x22>
 8005ede:	3307      	adds	r3, #7
 8005ee0:	10db      	asrs	r3, r3, #3
 8005ee2:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	82bb      	strh	r3, [r7, #20]
 8005eec:	e044      	b.n	8005f78 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	827b      	strh	r3, [r7, #18]
 8005ef2:	e02f      	b.n	8005f54 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8005ef4:	8a7b      	ldrh	r3, [r7, #18]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	75fb      	strb	r3, [r7, #23]
 8005f04:	e012      	b.n	8005f2c <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8005f06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005f0e:	fb02 f203 	mul.w	r2, r2, r3
 8005f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da00      	bge.n	8005f1c <SSD1306_DrawBitmap+0x5e>
 8005f1a:	3307      	adds	r3, #7
 8005f1c:	10db      	asrs	r3, r3, #3
 8005f1e:	b21b      	sxth	r3, r3
 8005f20:	4413      	add	r3, r2
 8005f22:	461a      	mov	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8005f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da09      	bge.n	8005f48 <SSD1306_DrawBitmap+0x8a>
 8005f34:	89fa      	ldrh	r2, [r7, #14]
 8005f36:	8a7b      	ldrh	r3, [r7, #18]
 8005f38:	4413      	add	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	89b9      	ldrh	r1, [r7, #12]
 8005f3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 f92c 	bl	80061a0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8005f48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	827b      	strh	r3, [r7, #18]
 8005f54:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	dbc9      	blt.n	8005ef4 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8005f60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3301      	adds	r3, #1
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	82bb      	strh	r3, [r7, #20]
 8005f6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3301      	adds	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	81bb      	strh	r3, [r7, #12]
 8005f78:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005f7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	dbb4      	blt.n	8005eee <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8005f84:	bf00      	nop
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8005f92:	f000 f97b 	bl	800628c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8005f96:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	2178      	movs	r1, #120	; 0x78
 8005f9e:	485b      	ldr	r0, [pc, #364]	; (800610c <SSD1306_Init+0x180>)
 8005fa0:	f7fb fc1e 	bl	80017e0 <HAL_I2C_IsDeviceReady>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e0a9      	b.n	8006102 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8005fae:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005fb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005fb4:	e002      	b.n	8005fbc <SSD1306_Init+0x30>
		p--;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f9      	bne.n	8005fb6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8005fc2:	22ae      	movs	r2, #174	; 0xae
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	2078      	movs	r0, #120	; 0x78
 8005fc8:	f000 f9bc 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8005fcc:	2220      	movs	r2, #32
 8005fce:	2100      	movs	r1, #0
 8005fd0:	2078      	movs	r0, #120	; 0x78
 8005fd2:	f000 f9b7 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	2100      	movs	r1, #0
 8005fda:	2078      	movs	r0, #120	; 0x78
 8005fdc:	f000 f9b2 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005fe0:	22b0      	movs	r2, #176	; 0xb0
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	2078      	movs	r0, #120	; 0x78
 8005fe6:	f000 f9ad 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8005fea:	22c8      	movs	r2, #200	; 0xc8
 8005fec:	2100      	movs	r1, #0
 8005fee:	2078      	movs	r0, #120	; 0x78
 8005ff0:	f000 f9a8 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	2078      	movs	r0, #120	; 0x78
 8005ffa:	f000 f9a3 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005ffe:	2210      	movs	r2, #16
 8006000:	2100      	movs	r1, #0
 8006002:	2078      	movs	r0, #120	; 0x78
 8006004:	f000 f99e 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006008:	2240      	movs	r2, #64	; 0x40
 800600a:	2100      	movs	r1, #0
 800600c:	2078      	movs	r0, #120	; 0x78
 800600e:	f000 f999 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006012:	2281      	movs	r2, #129	; 0x81
 8006014:	2100      	movs	r1, #0
 8006016:	2078      	movs	r0, #120	; 0x78
 8006018:	f000 f994 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800601c:	22ff      	movs	r2, #255	; 0xff
 800601e:	2100      	movs	r1, #0
 8006020:	2078      	movs	r0, #120	; 0x78
 8006022:	f000 f98f 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006026:	22a1      	movs	r2, #161	; 0xa1
 8006028:	2100      	movs	r1, #0
 800602a:	2078      	movs	r0, #120	; 0x78
 800602c:	f000 f98a 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006030:	22a6      	movs	r2, #166	; 0xa6
 8006032:	2100      	movs	r1, #0
 8006034:	2078      	movs	r0, #120	; 0x78
 8006036:	f000 f985 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800603a:	22a8      	movs	r2, #168	; 0xa8
 800603c:	2100      	movs	r1, #0
 800603e:	2078      	movs	r0, #120	; 0x78
 8006040:	f000 f980 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006044:	223f      	movs	r2, #63	; 0x3f
 8006046:	2100      	movs	r1, #0
 8006048:	2078      	movs	r0, #120	; 0x78
 800604a:	f000 f97b 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800604e:	22a4      	movs	r2, #164	; 0xa4
 8006050:	2100      	movs	r1, #0
 8006052:	2078      	movs	r0, #120	; 0x78
 8006054:	f000 f976 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006058:	22d3      	movs	r2, #211	; 0xd3
 800605a:	2100      	movs	r1, #0
 800605c:	2078      	movs	r0, #120	; 0x78
 800605e:	f000 f971 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006062:	2200      	movs	r2, #0
 8006064:	2100      	movs	r1, #0
 8006066:	2078      	movs	r0, #120	; 0x78
 8006068:	f000 f96c 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800606c:	22d5      	movs	r2, #213	; 0xd5
 800606e:	2100      	movs	r1, #0
 8006070:	2078      	movs	r0, #120	; 0x78
 8006072:	f000 f967 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006076:	22f0      	movs	r2, #240	; 0xf0
 8006078:	2100      	movs	r1, #0
 800607a:	2078      	movs	r0, #120	; 0x78
 800607c:	f000 f962 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006080:	22d9      	movs	r2, #217	; 0xd9
 8006082:	2100      	movs	r1, #0
 8006084:	2078      	movs	r0, #120	; 0x78
 8006086:	f000 f95d 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800608a:	2222      	movs	r2, #34	; 0x22
 800608c:	2100      	movs	r1, #0
 800608e:	2078      	movs	r0, #120	; 0x78
 8006090:	f000 f958 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006094:	22da      	movs	r2, #218	; 0xda
 8006096:	2100      	movs	r1, #0
 8006098:	2078      	movs	r0, #120	; 0x78
 800609a:	f000 f953 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800609e:	2212      	movs	r2, #18
 80060a0:	2100      	movs	r1, #0
 80060a2:	2078      	movs	r0, #120	; 0x78
 80060a4:	f000 f94e 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80060a8:	22db      	movs	r2, #219	; 0xdb
 80060aa:	2100      	movs	r1, #0
 80060ac:	2078      	movs	r0, #120	; 0x78
 80060ae:	f000 f949 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80060b2:	2220      	movs	r2, #32
 80060b4:	2100      	movs	r1, #0
 80060b6:	2078      	movs	r0, #120	; 0x78
 80060b8:	f000 f944 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80060bc:	228d      	movs	r2, #141	; 0x8d
 80060be:	2100      	movs	r1, #0
 80060c0:	2078      	movs	r0, #120	; 0x78
 80060c2:	f000 f93f 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80060c6:	2214      	movs	r2, #20
 80060c8:	2100      	movs	r1, #0
 80060ca:	2078      	movs	r0, #120	; 0x78
 80060cc:	f000 f93a 	bl	8006344 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80060d0:	22af      	movs	r2, #175	; 0xaf
 80060d2:	2100      	movs	r1, #0
 80060d4:	2078      	movs	r0, #120	; 0x78
 80060d6:	f000 f935 	bl	8006344 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80060da:	222e      	movs	r2, #46	; 0x2e
 80060dc:	2100      	movs	r1, #0
 80060de:	2078      	movs	r0, #120	; 0x78
 80060e0:	f000 f930 	bl	8006344 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80060e4:	2000      	movs	r0, #0
 80060e6:	f000 f843 	bl	8006170 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80060ea:	f000 f813 	bl	8006114 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80060ee:	4b08      	ldr	r3, [pc, #32]	; (8006110 <SSD1306_Init+0x184>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <SSD1306_Init+0x184>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <SSD1306_Init+0x184>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006100:	2301      	movs	r3, #1
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	2000427c 	.word	0x2000427c
 8006110:	200041e4 	.word	0x200041e4

08006114 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800611a:	2300      	movs	r3, #0
 800611c:	71fb      	strb	r3, [r7, #7]
 800611e:	e01d      	b.n	800615c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	3b50      	subs	r3, #80	; 0x50
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	2100      	movs	r1, #0
 800612a:	2078      	movs	r0, #120	; 0x78
 800612c:	f000 f90a 	bl	8006344 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006130:	2200      	movs	r2, #0
 8006132:	2100      	movs	r1, #0
 8006134:	2078      	movs	r0, #120	; 0x78
 8006136:	f000 f905 	bl	8006344 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800613a:	2210      	movs	r2, #16
 800613c:	2100      	movs	r1, #0
 800613e:	2078      	movs	r0, #120	; 0x78
 8006140:	f000 f900 	bl	8006344 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	01db      	lsls	r3, r3, #7
 8006148:	4a08      	ldr	r2, [pc, #32]	; (800616c <SSD1306_UpdateScreen+0x58>)
 800614a:	441a      	add	r2, r3
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	2140      	movs	r1, #64	; 0x40
 8006150:	2078      	movs	r0, #120	; 0x78
 8006152:	f000 f8af 	bl	80062b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	3301      	adds	r3, #1
 800615a:	71fb      	strb	r3, [r7, #7]
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	2b07      	cmp	r3, #7
 8006160:	d9de      	bls.n	8006120 <SSD1306_UpdateScreen+0xc>
	}
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20003de4 	.word	0x20003de4

08006170 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <SSD1306_Fill+0x14>
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <SSD1306_Fill+0x16>
 8006184:	23ff      	movs	r3, #255	; 0xff
 8006186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800618a:	4619      	mov	r1, r3
 800618c:	4803      	ldr	r0, [pc, #12]	; (800619c <SSD1306_Fill+0x2c>)
 800618e:	f000 fc49 	bl	8006a24 <memset>
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20003de4 	.word	0x20003de4

080061a0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	80fb      	strh	r3, [r7, #6]
 80061aa:	460b      	mov	r3, r1
 80061ac:	80bb      	strh	r3, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	70fb      	strb	r3, [r7, #3]
	if (
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	2b7f      	cmp	r3, #127	; 0x7f
 80061b6:	d848      	bhi.n	800624a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80061b8:	88bb      	ldrh	r3, [r7, #4]
 80061ba:	2b3f      	cmp	r3, #63	; 0x3f
 80061bc:	d845      	bhi.n	800624a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80061be:	4b26      	ldr	r3, [pc, #152]	; (8006258 <SSD1306_DrawPixel+0xb8>)
 80061c0:	791b      	ldrb	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d006      	beq.n	80061d4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d11a      	bne.n	8006210 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80061da:	88fa      	ldrh	r2, [r7, #6]
 80061dc:	88bb      	ldrh	r3, [r7, #4]
 80061de:	08db      	lsrs	r3, r3, #3
 80061e0:	b298      	uxth	r0, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	01db      	lsls	r3, r3, #7
 80061e6:	4413      	add	r3, r2
 80061e8:	4a1c      	ldr	r2, [pc, #112]	; (800625c <SSD1306_DrawPixel+0xbc>)
 80061ea:	5cd3      	ldrb	r3, [r2, r3]
 80061ec:	b25a      	sxtb	r2, r3
 80061ee:	88bb      	ldrh	r3, [r7, #4]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	2101      	movs	r1, #1
 80061f6:	fa01 f303 	lsl.w	r3, r1, r3
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	4313      	orrs	r3, r2
 80061fe:	b259      	sxtb	r1, r3
 8006200:	88fa      	ldrh	r2, [r7, #6]
 8006202:	4603      	mov	r3, r0
 8006204:	01db      	lsls	r3, r3, #7
 8006206:	4413      	add	r3, r2
 8006208:	b2c9      	uxtb	r1, r1
 800620a:	4a14      	ldr	r2, [pc, #80]	; (800625c <SSD1306_DrawPixel+0xbc>)
 800620c:	54d1      	strb	r1, [r2, r3]
 800620e:	e01d      	b.n	800624c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006210:	88fa      	ldrh	r2, [r7, #6]
 8006212:	88bb      	ldrh	r3, [r7, #4]
 8006214:	08db      	lsrs	r3, r3, #3
 8006216:	b298      	uxth	r0, r3
 8006218:	4603      	mov	r3, r0
 800621a:	01db      	lsls	r3, r3, #7
 800621c:	4413      	add	r3, r2
 800621e:	4a0f      	ldr	r2, [pc, #60]	; (800625c <SSD1306_DrawPixel+0xbc>)
 8006220:	5cd3      	ldrb	r3, [r2, r3]
 8006222:	b25a      	sxtb	r2, r3
 8006224:	88bb      	ldrh	r3, [r7, #4]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2101      	movs	r1, #1
 800622c:	fa01 f303 	lsl.w	r3, r1, r3
 8006230:	b25b      	sxtb	r3, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	b25b      	sxtb	r3, r3
 8006236:	4013      	ands	r3, r2
 8006238:	b259      	sxtb	r1, r3
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	4603      	mov	r3, r0
 800623e:	01db      	lsls	r3, r3, #7
 8006240:	4413      	add	r3, r2
 8006242:	b2c9      	uxtb	r1, r1
 8006244:	4a05      	ldr	r2, [pc, #20]	; (800625c <SSD1306_DrawPixel+0xbc>)
 8006246:	54d1      	strb	r1, [r2, r3]
 8006248:	e000      	b.n	800624c <SSD1306_DrawPixel+0xac>
		return;
 800624a:	bf00      	nop
	}
}
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	200041e4 	.word	0x200041e4
 800625c:	20003de4 	.word	0x20003de4

08006260 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	460a      	mov	r2, r1
 800626a:	80fb      	strh	r3, [r7, #6]
 800626c:	4613      	mov	r3, r2
 800626e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006270:	4a05      	ldr	r2, [pc, #20]	; (8006288 <SSD1306_GotoXY+0x28>)
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006276:	4a04      	ldr	r2, [pc, #16]	; (8006288 <SSD1306_GotoXY+0x28>)
 8006278:	88bb      	ldrh	r3, [r7, #4]
 800627a:	8053      	strh	r3, [r2, #2]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	200041e4 	.word	0x200041e4

0800628c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <ssd1306_I2C_Init+0x24>)
 8006294:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006296:	e002      	b.n	800629e <ssd1306_I2C_Init+0x12>
		p--;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3b01      	subs	r3, #1
 800629c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f9      	bne.n	8006298 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	0003d090 	.word	0x0003d090

080062b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b0c7      	sub	sp, #284	; 0x11c
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	4639      	mov	r1, r7
 80062c0:	600a      	str	r2, [r1, #0]
 80062c2:	4619      	mov	r1, r3
 80062c4:	1dfb      	adds	r3, r7, #7
 80062c6:	4622      	mov	r2, r4
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	1dbb      	adds	r3, r7, #6
 80062cc:	4602      	mov	r2, r0
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	460a      	mov	r2, r1
 80062d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80062d6:	f107 030c 	add.w	r3, r7, #12
 80062da:	1dba      	adds	r2, r7, #6
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80062e6:	e010      	b.n	800630a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80062e8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80062ec:	463a      	mov	r2, r7
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	441a      	add	r2, r3
 80062f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80062f6:	3301      	adds	r3, #1
 80062f8:	7811      	ldrb	r1, [r2, #0]
 80062fa:	f107 020c 	add.w	r2, r7, #12
 80062fe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8006300:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8006304:	3301      	adds	r3, #1
 8006306:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800630a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800630e:	b29b      	uxth	r3, r3
 8006310:	1d3a      	adds	r2, r7, #4
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d8e7      	bhi.n	80062e8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8006318:	1dfb      	adds	r3, r7, #7
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b299      	uxth	r1, r3
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	b298      	uxth	r0, r3
 8006326:	f107 020c 	add.w	r2, r7, #12
 800632a:	230a      	movs	r3, #10
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	4603      	mov	r3, r0
 8006330:	4803      	ldr	r0, [pc, #12]	; (8006340 <ssd1306_I2C_WriteMulti+0x8c>)
 8006332:	f7fb f961 	bl	80015f8 <HAL_I2C_Master_Transmit>
}
 8006336:	bf00      	nop
 8006338:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}
 8006340:	2000427c 	.word	0x2000427c

08006344 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af02      	add	r7, sp, #8
 800634a:	4603      	mov	r3, r0
 800634c:	71fb      	strb	r3, [r7, #7]
 800634e:	460b      	mov	r3, r1
 8006350:	71bb      	strb	r3, [r7, #6]
 8006352:	4613      	mov	r3, r2
 8006354:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8006356:	79bb      	ldrb	r3, [r7, #6]
 8006358:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800635a:	797b      	ldrb	r3, [r7, #5]
 800635c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	b299      	uxth	r1, r3
 8006362:	f107 020c 	add.w	r2, r7, #12
 8006366:	230a      	movs	r3, #10
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2302      	movs	r3, #2
 800636c:	4803      	ldr	r0, [pc, #12]	; (800637c <ssd1306_I2C_Write+0x38>)
 800636e:	f7fb f943 	bl	80015f8 <HAL_I2C_Master_Transmit>
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	2000427c 	.word	0x2000427c

08006380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <HAL_MspInit+0x4c>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4a10      	ldr	r2, [pc, #64]	; (80063cc <HAL_MspInit+0x4c>)
 800638c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006390:	6413      	str	r3, [r2, #64]	; 0x40
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <HAL_MspInit+0x4c>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <HAL_MspInit+0x4c>)
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <HAL_MspInit+0x4c>)
 80063a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063a8:	6453      	str	r3, [r2, #68]	; 0x44
 80063aa:	4b08      	ldr	r3, [pc, #32]	; (80063cc <HAL_MspInit+0x4c>)
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063b6:	2200      	movs	r2, #0
 80063b8:	210f      	movs	r1, #15
 80063ba:	f06f 0001 	mvn.w	r0, #1
 80063be:	f7fa fa17 	bl	80007f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40023800 	.word	0x40023800

080063d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08e      	sub	sp, #56	; 0x38
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a4e      	ldr	r2, [pc, #312]	; (8006528 <HAL_ETH_MspInit+0x158>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	f040 8096 	bne.w	8006520 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80063f4:	4b4d      	ldr	r3, [pc, #308]	; (800652c <HAL_ETH_MspInit+0x15c>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	4a4c      	ldr	r2, [pc, #304]	; (800652c <HAL_ETH_MspInit+0x15c>)
 80063fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063fe:	6313      	str	r3, [r2, #48]	; 0x30
 8006400:	4b4a      	ldr	r3, [pc, #296]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	4b47      	ldr	r3, [pc, #284]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	4a46      	ldr	r2, [pc, #280]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006416:	6313      	str	r3, [r2, #48]	; 0x30
 8006418:	4b44      	ldr	r3, [pc, #272]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4b41      	ldr	r3, [pc, #260]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	4a40      	ldr	r2, [pc, #256]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800642a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800642e:	6313      	str	r3, [r2, #48]	; 0x30
 8006430:	4b3e      	ldr	r3, [pc, #248]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800643c:	4b3b      	ldr	r3, [pc, #236]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	4a3a      	ldr	r2, [pc, #232]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006442:	f043 0304 	orr.w	r3, r3, #4
 8006446:	6313      	str	r3, [r2, #48]	; 0x30
 8006448:	4b38      	ldr	r3, [pc, #224]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006454:	4b35      	ldr	r3, [pc, #212]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	4a34      	ldr	r2, [pc, #208]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	6313      	str	r3, [r2, #48]	; 0x30
 8006460:	4b32      	ldr	r3, [pc, #200]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800646c:	4b2f      	ldr	r3, [pc, #188]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	4a2e      	ldr	r2, [pc, #184]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	6313      	str	r3, [r2, #48]	; 0x30
 8006478:	4b2c      	ldr	r3, [pc, #176]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006484:	4b29      	ldr	r3, [pc, #164]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	4a28      	ldr	r2, [pc, #160]	; (800652c <HAL_ETH_MspInit+0x15c>)
 800648a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648e:	6313      	str	r3, [r2, #48]	; 0x30
 8006490:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_ETH_MspInit+0x15c>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800649c:	2332      	movs	r3, #50	; 0x32
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064a0:	2302      	movs	r3, #2
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a8:	2303      	movs	r3, #3
 80064aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064ac:	230b      	movs	r3, #11
 80064ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b4:	4619      	mov	r1, r3
 80064b6:	481e      	ldr	r0, [pc, #120]	; (8006530 <HAL_ETH_MspInit+0x160>)
 80064b8:	f7fa fe30 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80064bc:	2386      	movs	r3, #134	; 0x86
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c0:	2302      	movs	r3, #2
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064c8:	2303      	movs	r3, #3
 80064ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064cc:	230b      	movs	r3, #11
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d4:	4619      	mov	r1, r3
 80064d6:	4817      	ldr	r0, [pc, #92]	; (8006534 <HAL_ETH_MspInit+0x164>)
 80064d8:	f7fa fe20 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80064dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e2:	2302      	movs	r3, #2
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064ea:	2303      	movs	r3, #3
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064ee:	230b      	movs	r3, #11
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80064f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f6:	4619      	mov	r1, r3
 80064f8:	480f      	ldr	r0, [pc, #60]	; (8006538 <HAL_ETH_MspInit+0x168>)
 80064fa:	f7fa fe0f 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80064fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006504:	2302      	movs	r3, #2
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006508:	2300      	movs	r3, #0
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800650c:	2303      	movs	r3, #3
 800650e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006510:	230b      	movs	r3, #11
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006518:	4619      	mov	r1, r3
 800651a:	4808      	ldr	r0, [pc, #32]	; (800653c <HAL_ETH_MspInit+0x16c>)
 800651c:	f7fa fdfe 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8006520:	bf00      	nop
 8006522:	3738      	adds	r7, #56	; 0x38
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40028000 	.word	0x40028000
 800652c:	40023800 	.word	0x40023800
 8006530:	40020800 	.word	0x40020800
 8006534:	40020000 	.word	0x40020000
 8006538:	40020400 	.word	0x40020400
 800653c:	40021800 	.word	0x40021800

08006540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08a      	sub	sp, #40	; 0x28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006548:	f107 0314 	add.w	r3, r7, #20
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a17      	ldr	r2, [pc, #92]	; (80065bc <HAL_I2C_MspInit+0x7c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d128      	bne.n	80065b4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <HAL_I2C_MspInit+0x80>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <HAL_I2C_MspInit+0x80>)
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	6313      	str	r3, [r2, #48]	; 0x30
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <HAL_I2C_MspInit+0x80>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800657a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800657e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006580:	2312      	movs	r3, #18
 8006582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006584:	2301      	movs	r3, #1
 8006586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006588:	2303      	movs	r3, #3
 800658a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800658c:	2304      	movs	r3, #4
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006590:	f107 0314 	add.w	r3, r7, #20
 8006594:	4619      	mov	r1, r3
 8006596:	480b      	ldr	r0, [pc, #44]	; (80065c4 <HAL_I2C_MspInit+0x84>)
 8006598:	f7fa fdc0 	bl	800111c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800659c:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <HAL_I2C_MspInit+0x80>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	4a07      	ldr	r2, [pc, #28]	; (80065c0 <HAL_I2C_MspInit+0x80>)
 80065a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065a6:	6413      	str	r3, [r2, #64]	; 0x40
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_I2C_MspInit+0x80>)
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80065b4:	bf00      	nop
 80065b6:	3728      	adds	r7, #40	; 0x28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40005400 	.word	0x40005400
 80065c0:	40023800 	.word	0x40023800
 80065c4:	40020400 	.word	0x40020400

080065c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a17      	ldr	r2, [pc, #92]	; (8006644 <HAL_UART_MspInit+0x7c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d128      	bne.n	800663c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80065ea:	4b17      	ldr	r3, [pc, #92]	; (8006648 <HAL_UART_MspInit+0x80>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	4a16      	ldr	r2, [pc, #88]	; (8006648 <HAL_UART_MspInit+0x80>)
 80065f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065f4:	6413      	str	r3, [r2, #64]	; 0x40
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <HAL_UART_MspInit+0x80>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <HAL_UART_MspInit+0x80>)
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	4a10      	ldr	r2, [pc, #64]	; (8006648 <HAL_UART_MspInit+0x80>)
 8006608:	f043 0308 	orr.w	r3, r3, #8
 800660c:	6313      	str	r3, [r2, #48]	; 0x30
 800660e:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <HAL_UART_MspInit+0x80>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800661a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800661e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006620:	2302      	movs	r3, #2
 8006622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006628:	2303      	movs	r3, #3
 800662a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800662c:	2307      	movs	r3, #7
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006630:	f107 0314 	add.w	r3, r7, #20
 8006634:	4619      	mov	r1, r3
 8006636:	4805      	ldr	r0, [pc, #20]	; (800664c <HAL_UART_MspInit+0x84>)
 8006638:	f7fa fd70 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800663c:	bf00      	nop
 800663e:	3728      	adds	r7, #40	; 0x28
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40004800 	.word	0x40004800
 8006648:	40023800 	.word	0x40023800
 800664c:	40020c00 	.word	0x40020c00

08006650 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006658:	f107 0314 	add.w	r3, r7, #20
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	609a      	str	r2, [r3, #8]
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006670:	d141      	bne.n	80066f6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006672:	4b23      	ldr	r3, [pc, #140]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4a22      	ldr	r2, [pc, #136]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6313      	str	r3, [r2, #48]	; 0x30
 800667e:	4b20      	ldr	r3, [pc, #128]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800668a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800668e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006690:	2302      	movs	r3, #2
 8006692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006698:	2303      	movs	r3, #3
 800669a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800669c:	230a      	movs	r3, #10
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	4619      	mov	r1, r3
 80066a6:	4817      	ldr	r0, [pc, #92]	; (8006704 <HAL_PCD_MspInit+0xb4>)
 80066a8:	f7fa fd38 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80066ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80066ba:	f107 0314 	add.w	r3, r7, #20
 80066be:	4619      	mov	r1, r3
 80066c0:	4810      	ldr	r0, [pc, #64]	; (8006704 <HAL_PCD_MspInit+0xb4>)
 80066c2:	f7fa fd2b 	bl	800111c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066c6:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	4a0d      	ldr	r2, [pc, #52]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 80066cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d0:	6353      	str	r3, [r2, #52]	; 0x34
 80066d2:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4b08      	ldr	r3, [pc, #32]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	4a07      	ldr	r2, [pc, #28]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 80066e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066e8:	6453      	str	r3, [r2, #68]	; 0x44
 80066ea:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_PCD_MspInit+0xb0>)
 80066ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f2:	60bb      	str	r3, [r7, #8]
 80066f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80066f6:	bf00      	nop
 80066f8:	3728      	adds	r7, #40	; 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	40023800 	.word	0x40023800
 8006704:	40020000 	.word	0x40020000

08006708 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8006718:	2200      	movs	r2, #0
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	2037      	movs	r0, #55	; 0x37
 800671e:	f7fa f867 	bl	80007f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006722:	2037      	movs	r0, #55	; 0x37
 8006724:	f7fa f880 	bl	8000828 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8006728:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <HAL_InitTick+0xa0>)
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_InitTick+0xa0>)
 800672e:	f043 0320 	orr.w	r3, r3, #32
 8006732:	6413      	str	r3, [r2, #64]	; 0x40
 8006734:	4b1c      	ldr	r3, [pc, #112]	; (80067a8 <HAL_InitTick+0xa0>)
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006740:	f107 0210 	add.w	r2, r7, #16
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f7fc f95e 	bl	8002a0c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006750:	f7fc f934 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8006754:	4603      	mov	r3, r0
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	4a13      	ldr	r2, [pc, #76]	; (80067ac <HAL_InitTick+0xa4>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0c9b      	lsrs	r3, r3, #18
 8006764:	3b01      	subs	r3, #1
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8006768:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <HAL_InitTick+0xa8>)
 800676a:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <HAL_InitTick+0xac>)
 800676c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800676e:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <HAL_InitTick+0xa8>)
 8006770:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006774:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8006776:	4a0e      	ldr	r2, [pc, #56]	; (80067b0 <HAL_InitTick+0xa8>)
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800677c:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <HAL_InitTick+0xa8>)
 800677e:	2200      	movs	r2, #0
 8006780:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_InitTick+0xa8>)
 8006784:	2200      	movs	r2, #0
 8006786:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8006788:	4809      	ldr	r0, [pc, #36]	; (80067b0 <HAL_InitTick+0xa8>)
 800678a:	f7fc fd97 	bl	80032bc <HAL_TIM_Base_Init>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8006794:	4806      	ldr	r0, [pc, #24]	; (80067b0 <HAL_InitTick+0xa8>)
 8006796:	f7fc fdc7 	bl	8003328 <HAL_TIM_Base_Start_IT>
 800679a:	4603      	mov	r3, r0
 800679c:	e000      	b.n	80067a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3730      	adds	r7, #48	; 0x30
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	40023800 	.word	0x40023800
 80067ac:	431bde83 	.word	0x431bde83
 80067b0:	20004724 	.word	0x20004724
 80067b4:	40001400 	.word	0x40001400

080067b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80067bc:	bf00      	nop
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067c6:	b480      	push	{r7}
 80067c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067ca:	e7fe      	b.n	80067ca <HardFault_Handler+0x4>

080067cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067d0:	e7fe      	b.n	80067d0 <MemManage_Handler+0x4>

080067d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067d2:	b480      	push	{r7}
 80067d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067d6:	e7fe      	b.n	80067d6 <BusFault_Handler+0x4>

080067d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067dc:	e7fe      	b.n	80067dc <UsageFault_Handler+0x4>

080067de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067de:	b480      	push	{r7}
 80067e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067e2:	bf00      	nop
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80067f0:	4802      	ldr	r0, [pc, #8]	; (80067fc <TIM7_IRQHandler+0x10>)
 80067f2:	f7fc fdc3 	bl	800337c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80067f6:	bf00      	nop
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20004724 	.word	0x20004724

08006800 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e00a      	b.n	8006828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006812:	f3af 8000 	nop.w
 8006816:	4601      	mov	r1, r0
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	60ba      	str	r2, [r7, #8]
 800681e:	b2ca      	uxtb	r2, r1
 8006820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	dbf0      	blt.n	8006812 <_read+0x12>
	}

return len;
 8006830:	687b      	ldr	r3, [r7, #4]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <_close>:
	}
	return len;
}

int _close(int file)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
	return -1;
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006862:	605a      	str	r2, [r3, #4]
	return 0;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <_isatty>:

int _isatty(int file)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
	return 1;
 800687a:	2301      	movs	r3, #1
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
	return 0;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068ac:	4a14      	ldr	r2, [pc, #80]	; (8006900 <_sbrk+0x5c>)
 80068ae:	4b15      	ldr	r3, [pc, #84]	; (8006904 <_sbrk+0x60>)
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068b8:	4b13      	ldr	r3, [pc, #76]	; (8006908 <_sbrk+0x64>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <_sbrk+0x64>)
 80068c2:	4a12      	ldr	r2, [pc, #72]	; (800690c <_sbrk+0x68>)
 80068c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <_sbrk+0x64>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d207      	bcs.n	80068e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068d4:	f000 f87c 	bl	80069d0 <__errno>
 80068d8:	4602      	mov	r2, r0
 80068da:	230c      	movs	r3, #12
 80068dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295
 80068e2:	e009      	b.n	80068f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068e4:	4b08      	ldr	r3, [pc, #32]	; (8006908 <_sbrk+0x64>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <_sbrk+0x64>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	4a05      	ldr	r2, [pc, #20]	; (8006908 <_sbrk+0x64>)
 80068f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20080000 	.word	0x20080000
 8006904:	00000400 	.word	0x00000400
 8006908:	200041ec 	.word	0x200041ec
 800690c:	20004768 	.word	0x20004768

08006910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006914:	4b15      	ldr	r3, [pc, #84]	; (800696c <SystemInit+0x5c>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <SystemInit+0x5c>)
 800691c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006924:	4b12      	ldr	r3, [pc, #72]	; (8006970 <SystemInit+0x60>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a11      	ldr	r2, [pc, #68]	; (8006970 <SystemInit+0x60>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006930:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <SystemInit+0x60>)
 8006932:	2200      	movs	r2, #0
 8006934:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <SystemInit+0x60>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	490d      	ldr	r1, [pc, #52]	; (8006970 <SystemInit+0x60>)
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <SystemInit+0x64>)
 800693e:	4013      	ands	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006942:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <SystemInit+0x60>)
 8006944:	4a0c      	ldr	r2, [pc, #48]	; (8006978 <SystemInit+0x68>)
 8006946:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <SystemInit+0x60>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a08      	ldr	r2, [pc, #32]	; (8006970 <SystemInit+0x60>)
 800694e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <SystemInit+0x60>)
 8006956:	2200      	movs	r2, #0
 8006958:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <SystemInit+0x5c>)
 800695c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006960:	609a      	str	r2, [r3, #8]
#endif
}
 8006962:	bf00      	nop
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	e000ed00 	.word	0xe000ed00
 8006970:	40023800 	.word	0x40023800
 8006974:	fef6ffff 	.word	0xfef6ffff
 8006978:	24003010 	.word	0x24003010

0800697c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800697c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80069b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006980:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006982:	e003      	b.n	800698c <LoopCopyDataInit>

08006984 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006986:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006988:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800698a:	3104      	adds	r1, #4

0800698c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800698c:	480b      	ldr	r0, [pc, #44]	; (80069bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006990:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006992:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006994:	d3f6      	bcc.n	8006984 <CopyDataInit>
  ldr  r2, =_sbss
 8006996:	4a0b      	ldr	r2, [pc, #44]	; (80069c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006998:	e002      	b.n	80069a0 <LoopFillZerobss>

0800699a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800699a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800699c:	f842 3b04 	str.w	r3, [r2], #4

080069a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80069a0:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80069a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80069a4:	d3f9      	bcc.n	800699a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80069a6:	f7ff ffb3 	bl	8006910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80069aa:	f000 f817 	bl	80069dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80069ae:	f7fe ff9f 	bl	80058f0 <main>
  bx  lr    
 80069b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80069b4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80069b8:	08007d68 	.word	0x08007d68
  ldr  r0, =_sdata
 80069bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80069c0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80069c4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80069c8:	20004768 	.word	0x20004768

080069cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80069cc:	e7fe      	b.n	80069cc <ADC_IRQHandler>
	...

080069d0 <__errno>:
 80069d0:	4b01      	ldr	r3, [pc, #4]	; (80069d8 <__errno+0x8>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	2000000c 	.word	0x2000000c

080069dc <__libc_init_array>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4e0d      	ldr	r6, [pc, #52]	; (8006a14 <__libc_init_array+0x38>)
 80069e0:	4c0d      	ldr	r4, [pc, #52]	; (8006a18 <__libc_init_array+0x3c>)
 80069e2:	1ba4      	subs	r4, r4, r6
 80069e4:	10a4      	asrs	r4, r4, #2
 80069e6:	2500      	movs	r5, #0
 80069e8:	42a5      	cmp	r5, r4
 80069ea:	d109      	bne.n	8006a00 <__libc_init_array+0x24>
 80069ec:	4e0b      	ldr	r6, [pc, #44]	; (8006a1c <__libc_init_array+0x40>)
 80069ee:	4c0c      	ldr	r4, [pc, #48]	; (8006a20 <__libc_init_array+0x44>)
 80069f0:	f000 ff04 	bl	80077fc <_init>
 80069f4:	1ba4      	subs	r4, r4, r6
 80069f6:	10a4      	asrs	r4, r4, #2
 80069f8:	2500      	movs	r5, #0
 80069fa:	42a5      	cmp	r5, r4
 80069fc:	d105      	bne.n	8006a0a <__libc_init_array+0x2e>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a04:	4798      	blx	r3
 8006a06:	3501      	adds	r5, #1
 8006a08:	e7ee      	b.n	80069e8 <__libc_init_array+0xc>
 8006a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a0e:	4798      	blx	r3
 8006a10:	3501      	adds	r5, #1
 8006a12:	e7f2      	b.n	80069fa <__libc_init_array+0x1e>
 8006a14:	08007d60 	.word	0x08007d60
 8006a18:	08007d60 	.word	0x08007d60
 8006a1c:	08007d60 	.word	0x08007d60
 8006a20:	08007d64 	.word	0x08007d64

08006a24 <memset>:
 8006a24:	4402      	add	r2, r0
 8006a26:	4603      	mov	r3, r0
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d100      	bne.n	8006a2e <memset+0xa>
 8006a2c:	4770      	bx	lr
 8006a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a32:	e7f9      	b.n	8006a28 <memset+0x4>

08006a34 <iprintf>:
 8006a34:	b40f      	push	{r0, r1, r2, r3}
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <iprintf+0x2c>)
 8006a38:	b513      	push	{r0, r1, r4, lr}
 8006a3a:	681c      	ldr	r4, [r3, #0]
 8006a3c:	b124      	cbz	r4, 8006a48 <iprintf+0x14>
 8006a3e:	69a3      	ldr	r3, [r4, #24]
 8006a40:	b913      	cbnz	r3, 8006a48 <iprintf+0x14>
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 f84e 	bl	8006ae4 <__sinit>
 8006a48:	ab05      	add	r3, sp, #20
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	68a1      	ldr	r1, [r4, #8]
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 f955 	bl	8006d00 <_vfiprintf_r>
 8006a56:	b002      	add	sp, #8
 8006a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a5c:	b004      	add	sp, #16
 8006a5e:	4770      	bx	lr
 8006a60:	2000000c 	.word	0x2000000c

08006a64 <std>:
 8006a64:	2300      	movs	r3, #0
 8006a66:	b510      	push	{r4, lr}
 8006a68:	4604      	mov	r4, r0
 8006a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a6e:	6083      	str	r3, [r0, #8]
 8006a70:	8181      	strh	r1, [r0, #12]
 8006a72:	6643      	str	r3, [r0, #100]	; 0x64
 8006a74:	81c2      	strh	r2, [r0, #14]
 8006a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a7a:	6183      	str	r3, [r0, #24]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	2208      	movs	r2, #8
 8006a80:	305c      	adds	r0, #92	; 0x5c
 8006a82:	f7ff ffcf 	bl	8006a24 <memset>
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <std+0x38>)
 8006a88:	6263      	str	r3, [r4, #36]	; 0x24
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <std+0x3c>)
 8006a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <std+0x40>)
 8006a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <std+0x44>)
 8006a94:	6224      	str	r4, [r4, #32]
 8006a96:	6323      	str	r3, [r4, #48]	; 0x30
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	bf00      	nop
 8006a9c:	0800725d 	.word	0x0800725d
 8006aa0:	0800727f 	.word	0x0800727f
 8006aa4:	080072b7 	.word	0x080072b7
 8006aa8:	080072db 	.word	0x080072db

08006aac <_cleanup_r>:
 8006aac:	4901      	ldr	r1, [pc, #4]	; (8006ab4 <_cleanup_r+0x8>)
 8006aae:	f000 b885 	b.w	8006bbc <_fwalk_reent>
 8006ab2:	bf00      	nop
 8006ab4:	080075b5 	.word	0x080075b5

08006ab8 <__sfmoreglue>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	1e4a      	subs	r2, r1, #1
 8006abc:	2568      	movs	r5, #104	; 0x68
 8006abe:	4355      	muls	r5, r2
 8006ac0:	460e      	mov	r6, r1
 8006ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ac6:	f000 f897 	bl	8006bf8 <_malloc_r>
 8006aca:	4604      	mov	r4, r0
 8006acc:	b140      	cbz	r0, 8006ae0 <__sfmoreglue+0x28>
 8006ace:	2100      	movs	r1, #0
 8006ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ad4:	300c      	adds	r0, #12
 8006ad6:	60a0      	str	r0, [r4, #8]
 8006ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006adc:	f7ff ffa2 	bl	8006a24 <memset>
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}

08006ae4 <__sinit>:
 8006ae4:	6983      	ldr	r3, [r0, #24]
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	4604      	mov	r4, r0
 8006aea:	bb33      	cbnz	r3, 8006b3a <__sinit+0x56>
 8006aec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006af0:	6503      	str	r3, [r0, #80]	; 0x50
 8006af2:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <__sinit+0x58>)
 8006af4:	4a12      	ldr	r2, [pc, #72]	; (8006b40 <__sinit+0x5c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6282      	str	r2, [r0, #40]	; 0x28
 8006afa:	4298      	cmp	r0, r3
 8006afc:	bf04      	itt	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	6183      	streq	r3, [r0, #24]
 8006b02:	f000 f81f 	bl	8006b44 <__sfp>
 8006b06:	6060      	str	r0, [r4, #4]
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 f81b 	bl	8006b44 <__sfp>
 8006b0e:	60a0      	str	r0, [r4, #8]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 f817 	bl	8006b44 <__sfp>
 8006b16:	2200      	movs	r2, #0
 8006b18:	60e0      	str	r0, [r4, #12]
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	6860      	ldr	r0, [r4, #4]
 8006b1e:	f7ff ffa1 	bl	8006a64 <std>
 8006b22:	2201      	movs	r2, #1
 8006b24:	2109      	movs	r1, #9
 8006b26:	68a0      	ldr	r0, [r4, #8]
 8006b28:	f7ff ff9c 	bl	8006a64 <std>
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	2112      	movs	r1, #18
 8006b30:	68e0      	ldr	r0, [r4, #12]
 8006b32:	f7ff ff97 	bl	8006a64 <std>
 8006b36:	2301      	movs	r3, #1
 8006b38:	61a3      	str	r3, [r4, #24]
 8006b3a:	bd10      	pop	{r4, pc}
 8006b3c:	08007cc0 	.word	0x08007cc0
 8006b40:	08006aad 	.word	0x08006aad

08006b44 <__sfp>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <__sfp+0x70>)
 8006b48:	681e      	ldr	r6, [r3, #0]
 8006b4a:	69b3      	ldr	r3, [r6, #24]
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	b913      	cbnz	r3, 8006b56 <__sfp+0x12>
 8006b50:	4630      	mov	r0, r6
 8006b52:	f7ff ffc7 	bl	8006ae4 <__sinit>
 8006b56:	3648      	adds	r6, #72	; 0x48
 8006b58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	d503      	bpl.n	8006b68 <__sfp+0x24>
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	b133      	cbz	r3, 8006b72 <__sfp+0x2e>
 8006b64:	6836      	ldr	r6, [r6, #0]
 8006b66:	e7f7      	b.n	8006b58 <__sfp+0x14>
 8006b68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b6c:	b16d      	cbz	r5, 8006b8a <__sfp+0x46>
 8006b6e:	3468      	adds	r4, #104	; 0x68
 8006b70:	e7f4      	b.n	8006b5c <__sfp+0x18>
 8006b72:	2104      	movs	r1, #4
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff ff9f 	bl	8006ab8 <__sfmoreglue>
 8006b7a:	6030      	str	r0, [r6, #0]
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1f1      	bne.n	8006b64 <__sfp+0x20>
 8006b80:	230c      	movs	r3, #12
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	4604      	mov	r4, r0
 8006b86:	4620      	mov	r0, r4
 8006b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <__sfp+0x74>)
 8006b8c:	6665      	str	r5, [r4, #100]	; 0x64
 8006b8e:	e9c4 5500 	strd	r5, r5, [r4]
 8006b92:	60a5      	str	r5, [r4, #8]
 8006b94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006b98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ba4:	f7ff ff3e 	bl	8006a24 <memset>
 8006ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bb0:	e7e9      	b.n	8006b86 <__sfp+0x42>
 8006bb2:	bf00      	nop
 8006bb4:	08007cc0 	.word	0x08007cc0
 8006bb8:	ffff0001 	.word	0xffff0001

08006bbc <_fwalk_reent>:
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	4689      	mov	r9, r1
 8006bc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bc8:	2600      	movs	r6, #0
 8006bca:	b914      	cbnz	r4, 8006bd2 <_fwalk_reent+0x16>
 8006bcc:	4630      	mov	r0, r6
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006bd6:	3f01      	subs	r7, #1
 8006bd8:	d501      	bpl.n	8006bde <_fwalk_reent+0x22>
 8006bda:	6824      	ldr	r4, [r4, #0]
 8006bdc:	e7f5      	b.n	8006bca <_fwalk_reent+0xe>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d907      	bls.n	8006bf4 <_fwalk_reent+0x38>
 8006be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006be8:	3301      	adds	r3, #1
 8006bea:	d003      	beq.n	8006bf4 <_fwalk_reent+0x38>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4640      	mov	r0, r8
 8006bf0:	47c8      	blx	r9
 8006bf2:	4306      	orrs	r6, r0
 8006bf4:	3568      	adds	r5, #104	; 0x68
 8006bf6:	e7ee      	b.n	8006bd6 <_fwalk_reent+0x1a>

08006bf8 <_malloc_r>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	1ccd      	adds	r5, r1, #3
 8006bfc:	f025 0503 	bic.w	r5, r5, #3
 8006c00:	3508      	adds	r5, #8
 8006c02:	2d0c      	cmp	r5, #12
 8006c04:	bf38      	it	cc
 8006c06:	250c      	movcc	r5, #12
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	db01      	blt.n	8006c12 <_malloc_r+0x1a>
 8006c0e:	42a9      	cmp	r1, r5
 8006c10:	d903      	bls.n	8006c1a <_malloc_r+0x22>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	2000      	movs	r0, #0
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
 8006c1a:	f000 fd6b 	bl	80076f4 <__malloc_lock>
 8006c1e:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <_malloc_r+0xac>)
 8006c20:	6814      	ldr	r4, [r2, #0]
 8006c22:	4621      	mov	r1, r4
 8006c24:	b991      	cbnz	r1, 8006c4c <_malloc_r+0x54>
 8006c26:	4c20      	ldr	r4, [pc, #128]	; (8006ca8 <_malloc_r+0xb0>)
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	b91b      	cbnz	r3, 8006c34 <_malloc_r+0x3c>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f000 fb05 	bl	800723c <_sbrk_r>
 8006c32:	6020      	str	r0, [r4, #0]
 8006c34:	4629      	mov	r1, r5
 8006c36:	4630      	mov	r0, r6
 8006c38:	f000 fb00 	bl	800723c <_sbrk_r>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d124      	bne.n	8006c8a <_malloc_r+0x92>
 8006c40:	230c      	movs	r3, #12
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	4630      	mov	r0, r6
 8006c46:	f000 fd56 	bl	80076f6 <__malloc_unlock>
 8006c4a:	e7e4      	b.n	8006c16 <_malloc_r+0x1e>
 8006c4c:	680b      	ldr	r3, [r1, #0]
 8006c4e:	1b5b      	subs	r3, r3, r5
 8006c50:	d418      	bmi.n	8006c84 <_malloc_r+0x8c>
 8006c52:	2b0b      	cmp	r3, #11
 8006c54:	d90f      	bls.n	8006c76 <_malloc_r+0x7e>
 8006c56:	600b      	str	r3, [r1, #0]
 8006c58:	50cd      	str	r5, [r1, r3]
 8006c5a:	18cc      	adds	r4, r1, r3
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f000 fd4a 	bl	80076f6 <__malloc_unlock>
 8006c62:	f104 000b 	add.w	r0, r4, #11
 8006c66:	1d23      	adds	r3, r4, #4
 8006c68:	f020 0007 	bic.w	r0, r0, #7
 8006c6c:	1ac3      	subs	r3, r0, r3
 8006c6e:	d0d3      	beq.n	8006c18 <_malloc_r+0x20>
 8006c70:	425a      	negs	r2, r3
 8006c72:	50e2      	str	r2, [r4, r3]
 8006c74:	e7d0      	b.n	8006c18 <_malloc_r+0x20>
 8006c76:	428c      	cmp	r4, r1
 8006c78:	684b      	ldr	r3, [r1, #4]
 8006c7a:	bf16      	itet	ne
 8006c7c:	6063      	strne	r3, [r4, #4]
 8006c7e:	6013      	streq	r3, [r2, #0]
 8006c80:	460c      	movne	r4, r1
 8006c82:	e7eb      	b.n	8006c5c <_malloc_r+0x64>
 8006c84:	460c      	mov	r4, r1
 8006c86:	6849      	ldr	r1, [r1, #4]
 8006c88:	e7cc      	b.n	8006c24 <_malloc_r+0x2c>
 8006c8a:	1cc4      	adds	r4, r0, #3
 8006c8c:	f024 0403 	bic.w	r4, r4, #3
 8006c90:	42a0      	cmp	r0, r4
 8006c92:	d005      	beq.n	8006ca0 <_malloc_r+0xa8>
 8006c94:	1a21      	subs	r1, r4, r0
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 fad0 	bl	800723c <_sbrk_r>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d0cf      	beq.n	8006c40 <_malloc_r+0x48>
 8006ca0:	6025      	str	r5, [r4, #0]
 8006ca2:	e7db      	b.n	8006c5c <_malloc_r+0x64>
 8006ca4:	200041f0 	.word	0x200041f0
 8006ca8:	200041f4 	.word	0x200041f4

08006cac <__sfputc_r>:
 8006cac:	6893      	ldr	r3, [r2, #8]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	b410      	push	{r4}
 8006cb4:	6093      	str	r3, [r2, #8]
 8006cb6:	da08      	bge.n	8006cca <__sfputc_r+0x1e>
 8006cb8:	6994      	ldr	r4, [r2, #24]
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	db01      	blt.n	8006cc2 <__sfputc_r+0x16>
 8006cbe:	290a      	cmp	r1, #10
 8006cc0:	d103      	bne.n	8006cca <__sfputc_r+0x1e>
 8006cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc6:	f000 bb0d 	b.w	80072e4 <__swbuf_r>
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	1c58      	adds	r0, r3, #1
 8006cce:	6010      	str	r0, [r2, #0]
 8006cd0:	7019      	strb	r1, [r3, #0]
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <__sfputs_r>:
 8006cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cdc:	4606      	mov	r6, r0
 8006cde:	460f      	mov	r7, r1
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	18d5      	adds	r5, r2, r3
 8006ce4:	42ac      	cmp	r4, r5
 8006ce6:	d101      	bne.n	8006cec <__sfputs_r+0x12>
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e007      	b.n	8006cfc <__sfputs_r+0x22>
 8006cec:	463a      	mov	r2, r7
 8006cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff ffda 	bl	8006cac <__sfputc_r>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d1f3      	bne.n	8006ce4 <__sfputs_r+0xa>
 8006cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d00 <_vfiprintf_r>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	460c      	mov	r4, r1
 8006d06:	b09d      	sub	sp, #116	; 0x74
 8006d08:	4617      	mov	r7, r2
 8006d0a:	461d      	mov	r5, r3
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	b118      	cbz	r0, 8006d18 <_vfiprintf_r+0x18>
 8006d10:	6983      	ldr	r3, [r0, #24]
 8006d12:	b90b      	cbnz	r3, 8006d18 <_vfiprintf_r+0x18>
 8006d14:	f7ff fee6 	bl	8006ae4 <__sinit>
 8006d18:	4b7c      	ldr	r3, [pc, #496]	; (8006f0c <_vfiprintf_r+0x20c>)
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d158      	bne.n	8006dd0 <_vfiprintf_r+0xd0>
 8006d1e:	6874      	ldr	r4, [r6, #4]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	0718      	lsls	r0, r3, #28
 8006d24:	d55e      	bpl.n	8006de4 <_vfiprintf_r+0xe4>
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05b      	beq.n	8006de4 <_vfiprintf_r+0xe4>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	2320      	movs	r3, #32
 8006d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d36:	2330      	movs	r3, #48	; 0x30
 8006d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d3c:	9503      	str	r5, [sp, #12]
 8006d3e:	f04f 0b01 	mov.w	fp, #1
 8006d42:	46b8      	mov	r8, r7
 8006d44:	4645      	mov	r5, r8
 8006d46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d4a:	b10b      	cbz	r3, 8006d50 <_vfiprintf_r+0x50>
 8006d4c:	2b25      	cmp	r3, #37	; 0x25
 8006d4e:	d154      	bne.n	8006dfa <_vfiprintf_r+0xfa>
 8006d50:	ebb8 0a07 	subs.w	sl, r8, r7
 8006d54:	d00b      	beq.n	8006d6e <_vfiprintf_r+0x6e>
 8006d56:	4653      	mov	r3, sl
 8006d58:	463a      	mov	r2, r7
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f7ff ffbc 	bl	8006cda <__sfputs_r>
 8006d62:	3001      	adds	r0, #1
 8006d64:	f000 80c2 	beq.w	8006eec <_vfiprintf_r+0x1ec>
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	4453      	add	r3, sl
 8006d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6e:	f898 3000 	ldrb.w	r3, [r8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80ba 	beq.w	8006eec <_vfiprintf_r+0x1ec>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	9307      	str	r3, [sp, #28]
 8006d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d8c:	46a8      	mov	r8, r5
 8006d8e:	2205      	movs	r2, #5
 8006d90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006d94:	485e      	ldr	r0, [pc, #376]	; (8006f10 <_vfiprintf_r+0x210>)
 8006d96:	f7f9 fa53 	bl	8000240 <memchr>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	bb78      	cbnz	r0, 8006dfe <_vfiprintf_r+0xfe>
 8006d9e:	06d9      	lsls	r1, r3, #27
 8006da0:	bf44      	itt	mi
 8006da2:	2220      	movmi	r2, #32
 8006da4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006da8:	071a      	lsls	r2, r3, #28
 8006daa:	bf44      	itt	mi
 8006dac:	222b      	movmi	r2, #43	; 0x2b
 8006dae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006db2:	782a      	ldrb	r2, [r5, #0]
 8006db4:	2a2a      	cmp	r2, #42	; 0x2a
 8006db6:	d02a      	beq.n	8006e0e <_vfiprintf_r+0x10e>
 8006db8:	9a07      	ldr	r2, [sp, #28]
 8006dba:	46a8      	mov	r8, r5
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	250a      	movs	r5, #10
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dc6:	3b30      	subs	r3, #48	; 0x30
 8006dc8:	2b09      	cmp	r3, #9
 8006dca:	d969      	bls.n	8006ea0 <_vfiprintf_r+0x1a0>
 8006dcc:	b360      	cbz	r0, 8006e28 <_vfiprintf_r+0x128>
 8006dce:	e024      	b.n	8006e1a <_vfiprintf_r+0x11a>
 8006dd0:	4b50      	ldr	r3, [pc, #320]	; (8006f14 <_vfiprintf_r+0x214>)
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	d101      	bne.n	8006dda <_vfiprintf_r+0xda>
 8006dd6:	68b4      	ldr	r4, [r6, #8]
 8006dd8:	e7a2      	b.n	8006d20 <_vfiprintf_r+0x20>
 8006dda:	4b4f      	ldr	r3, [pc, #316]	; (8006f18 <_vfiprintf_r+0x218>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	bf08      	it	eq
 8006de0:	68f4      	ldreq	r4, [r6, #12]
 8006de2:	e79d      	b.n	8006d20 <_vfiprintf_r+0x20>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4630      	mov	r0, r6
 8006de8:	f000 fae0 	bl	80073ac <__swsetup_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d09d      	beq.n	8006d2c <_vfiprintf_r+0x2c>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b01d      	add	sp, #116	; 0x74
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	46a8      	mov	r8, r5
 8006dfc:	e7a2      	b.n	8006d44 <_vfiprintf_r+0x44>
 8006dfe:	4a44      	ldr	r2, [pc, #272]	; (8006f10 <_vfiprintf_r+0x210>)
 8006e00:	1a80      	subs	r0, r0, r2
 8006e02:	fa0b f000 	lsl.w	r0, fp, r0
 8006e06:	4318      	orrs	r0, r3
 8006e08:	9004      	str	r0, [sp, #16]
 8006e0a:	4645      	mov	r5, r8
 8006e0c:	e7be      	b.n	8006d8c <_vfiprintf_r+0x8c>
 8006e0e:	9a03      	ldr	r2, [sp, #12]
 8006e10:	1d11      	adds	r1, r2, #4
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	db01      	blt.n	8006e1e <_vfiprintf_r+0x11e>
 8006e1a:	9207      	str	r2, [sp, #28]
 8006e1c:	e004      	b.n	8006e28 <_vfiprintf_r+0x128>
 8006e1e:	4252      	negs	r2, r2
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	9207      	str	r2, [sp, #28]
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	f898 3000 	ldrb.w	r3, [r8]
 8006e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2e:	d10e      	bne.n	8006e4e <_vfiprintf_r+0x14e>
 8006e30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006e34:	2b2a      	cmp	r3, #42	; 0x2a
 8006e36:	d138      	bne.n	8006eaa <_vfiprintf_r+0x1aa>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	9203      	str	r2, [sp, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bfb8      	it	lt
 8006e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e48:	f108 0802 	add.w	r8, r8, #2
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	4d33      	ldr	r5, [pc, #204]	; (8006f1c <_vfiprintf_r+0x21c>)
 8006e50:	f898 1000 	ldrb.w	r1, [r8]
 8006e54:	2203      	movs	r2, #3
 8006e56:	4628      	mov	r0, r5
 8006e58:	f7f9 f9f2 	bl	8000240 <memchr>
 8006e5c:	b140      	cbz	r0, 8006e70 <_vfiprintf_r+0x170>
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	1b40      	subs	r0, r0, r5
 8006e62:	fa03 f000 	lsl.w	r0, r3, r0
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	4303      	orrs	r3, r0
 8006e6a:	f108 0801 	add.w	r8, r8, #1
 8006e6e:	9304      	str	r3, [sp, #16]
 8006e70:	f898 1000 	ldrb.w	r1, [r8]
 8006e74:	482a      	ldr	r0, [pc, #168]	; (8006f20 <_vfiprintf_r+0x220>)
 8006e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e7a:	2206      	movs	r2, #6
 8006e7c:	f108 0701 	add.w	r7, r8, #1
 8006e80:	f7f9 f9de 	bl	8000240 <memchr>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d037      	beq.n	8006ef8 <_vfiprintf_r+0x1f8>
 8006e88:	4b26      	ldr	r3, [pc, #152]	; (8006f24 <_vfiprintf_r+0x224>)
 8006e8a:	bb1b      	cbnz	r3, 8006ed4 <_vfiprintf_r+0x1d4>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	3307      	adds	r3, #7
 8006e90:	f023 0307 	bic.w	r3, r3, #7
 8006e94:	3308      	adds	r3, #8
 8006e96:	9303      	str	r3, [sp, #12]
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	444b      	add	r3, r9
 8006e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9e:	e750      	b.n	8006d42 <_vfiprintf_r+0x42>
 8006ea0:	fb05 3202 	mla	r2, r5, r2, r3
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	4688      	mov	r8, r1
 8006ea8:	e78a      	b.n	8006dc0 <_vfiprintf_r+0xc0>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f108 0801 	add.w	r8, r8, #1
 8006eb0:	9305      	str	r3, [sp, #20]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	250a      	movs	r5, #10
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ebc:	3a30      	subs	r2, #48	; 0x30
 8006ebe:	2a09      	cmp	r2, #9
 8006ec0:	d903      	bls.n	8006eca <_vfiprintf_r+0x1ca>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0c3      	beq.n	8006e4e <_vfiprintf_r+0x14e>
 8006ec6:	9105      	str	r1, [sp, #20]
 8006ec8:	e7c1      	b.n	8006e4e <_vfiprintf_r+0x14e>
 8006eca:	fb05 2101 	mla	r1, r5, r1, r2
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	e7f0      	b.n	8006eb6 <_vfiprintf_r+0x1b6>
 8006ed4:	ab03      	add	r3, sp, #12
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <_vfiprintf_r+0x228>)
 8006edc:	a904      	add	r1, sp, #16
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f3af 8000 	nop.w
 8006ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ee8:	4681      	mov	r9, r0
 8006eea:	d1d5      	bne.n	8006e98 <_vfiprintf_r+0x198>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	065b      	lsls	r3, r3, #25
 8006ef0:	f53f af7e 	bmi.w	8006df0 <_vfiprintf_r+0xf0>
 8006ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ef6:	e77d      	b.n	8006df4 <_vfiprintf_r+0xf4>
 8006ef8:	ab03      	add	r3, sp, #12
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	4622      	mov	r2, r4
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <_vfiprintf_r+0x228>)
 8006f00:	a904      	add	r1, sp, #16
 8006f02:	4630      	mov	r0, r6
 8006f04:	f000 f888 	bl	8007018 <_printf_i>
 8006f08:	e7ec      	b.n	8006ee4 <_vfiprintf_r+0x1e4>
 8006f0a:	bf00      	nop
 8006f0c:	08007ce4 	.word	0x08007ce4
 8006f10:	08007d24 	.word	0x08007d24
 8006f14:	08007d04 	.word	0x08007d04
 8006f18:	08007cc4 	.word	0x08007cc4
 8006f1c:	08007d2a 	.word	0x08007d2a
 8006f20:	08007d2e 	.word	0x08007d2e
 8006f24:	00000000 	.word	0x00000000
 8006f28:	08006cdb 	.word	0x08006cdb

08006f2c <_printf_common>:
 8006f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	4691      	mov	r9, r2
 8006f32:	461f      	mov	r7, r3
 8006f34:	688a      	ldr	r2, [r1, #8]
 8006f36:	690b      	ldr	r3, [r1, #16]
 8006f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	bfb8      	it	lt
 8006f40:	4613      	movlt	r3, r2
 8006f42:	f8c9 3000 	str.w	r3, [r9]
 8006f46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	b112      	cbz	r2, 8006f56 <_printf_common+0x2a>
 8006f50:	3301      	adds	r3, #1
 8006f52:	f8c9 3000 	str.w	r3, [r9]
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	0699      	lsls	r1, r3, #26
 8006f5a:	bf42      	ittt	mi
 8006f5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f60:	3302      	addmi	r3, #2
 8006f62:	f8c9 3000 	strmi.w	r3, [r9]
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	f015 0506 	ands.w	r5, r5, #6
 8006f6c:	d107      	bne.n	8006f7e <_printf_common+0x52>
 8006f6e:	f104 0a19 	add.w	sl, r4, #25
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	f8d9 2000 	ldr.w	r2, [r9]
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	42ab      	cmp	r3, r5
 8006f7c:	dc28      	bgt.n	8006fd0 <_printf_common+0xa4>
 8006f7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	3300      	adds	r3, #0
 8006f86:	bf18      	it	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	0692      	lsls	r2, r2, #26
 8006f8c:	d42d      	bmi.n	8006fea <_printf_common+0xbe>
 8006f8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f92:	4639      	mov	r1, r7
 8006f94:	4630      	mov	r0, r6
 8006f96:	47c0      	blx	r8
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d020      	beq.n	8006fde <_printf_common+0xb2>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	68e5      	ldr	r5, [r4, #12]
 8006fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8006fa4:	f003 0306 	and.w	r3, r3, #6
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	bf08      	it	eq
 8006fac:	1aad      	subeq	r5, r5, r2
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	6922      	ldr	r2, [r4, #16]
 8006fb2:	bf0c      	ite	eq
 8006fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fb8:	2500      	movne	r5, #0
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	bfc4      	itt	gt
 8006fbe:	1a9b      	subgt	r3, r3, r2
 8006fc0:	18ed      	addgt	r5, r5, r3
 8006fc2:	f04f 0900 	mov.w	r9, #0
 8006fc6:	341a      	adds	r4, #26
 8006fc8:	454d      	cmp	r5, r9
 8006fca:	d11a      	bne.n	8007002 <_printf_common+0xd6>
 8006fcc:	2000      	movs	r0, #0
 8006fce:	e008      	b.n	8006fe2 <_printf_common+0xb6>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	47c0      	blx	r8
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d103      	bne.n	8006fe6 <_printf_common+0xba>
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	3501      	adds	r5, #1
 8006fe8:	e7c3      	b.n	8006f72 <_printf_common+0x46>
 8006fea:	18e1      	adds	r1, r4, r3
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	2030      	movs	r0, #48	; 0x30
 8006ff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ff4:	4422      	add	r2, r4
 8006ff6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ffa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ffe:	3302      	adds	r3, #2
 8007000:	e7c5      	b.n	8006f8e <_printf_common+0x62>
 8007002:	2301      	movs	r3, #1
 8007004:	4622      	mov	r2, r4
 8007006:	4639      	mov	r1, r7
 8007008:	4630      	mov	r0, r6
 800700a:	47c0      	blx	r8
 800700c:	3001      	adds	r0, #1
 800700e:	d0e6      	beq.n	8006fde <_printf_common+0xb2>
 8007010:	f109 0901 	add.w	r9, r9, #1
 8007014:	e7d8      	b.n	8006fc8 <_printf_common+0x9c>
	...

08007018 <_printf_i>:
 8007018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800701c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007020:	460c      	mov	r4, r1
 8007022:	7e09      	ldrb	r1, [r1, #24]
 8007024:	b085      	sub	sp, #20
 8007026:	296e      	cmp	r1, #110	; 0x6e
 8007028:	4617      	mov	r7, r2
 800702a:	4606      	mov	r6, r0
 800702c:	4698      	mov	r8, r3
 800702e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007030:	f000 80b3 	beq.w	800719a <_printf_i+0x182>
 8007034:	d822      	bhi.n	800707c <_printf_i+0x64>
 8007036:	2963      	cmp	r1, #99	; 0x63
 8007038:	d036      	beq.n	80070a8 <_printf_i+0x90>
 800703a:	d80a      	bhi.n	8007052 <_printf_i+0x3a>
 800703c:	2900      	cmp	r1, #0
 800703e:	f000 80b9 	beq.w	80071b4 <_printf_i+0x19c>
 8007042:	2958      	cmp	r1, #88	; 0x58
 8007044:	f000 8083 	beq.w	800714e <_printf_i+0x136>
 8007048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800704c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007050:	e032      	b.n	80070b8 <_printf_i+0xa0>
 8007052:	2964      	cmp	r1, #100	; 0x64
 8007054:	d001      	beq.n	800705a <_printf_i+0x42>
 8007056:	2969      	cmp	r1, #105	; 0x69
 8007058:	d1f6      	bne.n	8007048 <_printf_i+0x30>
 800705a:	6820      	ldr	r0, [r4, #0]
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	0605      	lsls	r5, r0, #24
 8007060:	f103 0104 	add.w	r1, r3, #4
 8007064:	d52a      	bpl.n	80070bc <_printf_i+0xa4>
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6011      	str	r1, [r2, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	da03      	bge.n	8007076 <_printf_i+0x5e>
 800706e:	222d      	movs	r2, #45	; 0x2d
 8007070:	425b      	negs	r3, r3
 8007072:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007076:	486f      	ldr	r0, [pc, #444]	; (8007234 <_printf_i+0x21c>)
 8007078:	220a      	movs	r2, #10
 800707a:	e039      	b.n	80070f0 <_printf_i+0xd8>
 800707c:	2973      	cmp	r1, #115	; 0x73
 800707e:	f000 809d 	beq.w	80071bc <_printf_i+0x1a4>
 8007082:	d808      	bhi.n	8007096 <_printf_i+0x7e>
 8007084:	296f      	cmp	r1, #111	; 0x6f
 8007086:	d020      	beq.n	80070ca <_printf_i+0xb2>
 8007088:	2970      	cmp	r1, #112	; 0x70
 800708a:	d1dd      	bne.n	8007048 <_printf_i+0x30>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f043 0320 	orr.w	r3, r3, #32
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	e003      	b.n	800709e <_printf_i+0x86>
 8007096:	2975      	cmp	r1, #117	; 0x75
 8007098:	d017      	beq.n	80070ca <_printf_i+0xb2>
 800709a:	2978      	cmp	r1, #120	; 0x78
 800709c:	d1d4      	bne.n	8007048 <_printf_i+0x30>
 800709e:	2378      	movs	r3, #120	; 0x78
 80070a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070a4:	4864      	ldr	r0, [pc, #400]	; (8007238 <_printf_i+0x220>)
 80070a6:	e055      	b.n	8007154 <_printf_i+0x13c>
 80070a8:	6813      	ldr	r3, [r2, #0]
 80070aa:	1d19      	adds	r1, r3, #4
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6011      	str	r1, [r2, #0]
 80070b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070b8:	2301      	movs	r3, #1
 80070ba:	e08c      	b.n	80071d6 <_printf_i+0x1be>
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6011      	str	r1, [r2, #0]
 80070c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070c4:	bf18      	it	ne
 80070c6:	b21b      	sxthne	r3, r3
 80070c8:	e7cf      	b.n	800706a <_printf_i+0x52>
 80070ca:	6813      	ldr	r3, [r2, #0]
 80070cc:	6825      	ldr	r5, [r4, #0]
 80070ce:	1d18      	adds	r0, r3, #4
 80070d0:	6010      	str	r0, [r2, #0]
 80070d2:	0628      	lsls	r0, r5, #24
 80070d4:	d501      	bpl.n	80070da <_printf_i+0xc2>
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	e002      	b.n	80070e0 <_printf_i+0xc8>
 80070da:	0668      	lsls	r0, r5, #25
 80070dc:	d5fb      	bpl.n	80070d6 <_printf_i+0xbe>
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	4854      	ldr	r0, [pc, #336]	; (8007234 <_printf_i+0x21c>)
 80070e2:	296f      	cmp	r1, #111	; 0x6f
 80070e4:	bf14      	ite	ne
 80070e6:	220a      	movne	r2, #10
 80070e8:	2208      	moveq	r2, #8
 80070ea:	2100      	movs	r1, #0
 80070ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070f0:	6865      	ldr	r5, [r4, #4]
 80070f2:	60a5      	str	r5, [r4, #8]
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	f2c0 8095 	blt.w	8007224 <_printf_i+0x20c>
 80070fa:	6821      	ldr	r1, [r4, #0]
 80070fc:	f021 0104 	bic.w	r1, r1, #4
 8007100:	6021      	str	r1, [r4, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d13d      	bne.n	8007182 <_printf_i+0x16a>
 8007106:	2d00      	cmp	r5, #0
 8007108:	f040 808e 	bne.w	8007228 <_printf_i+0x210>
 800710c:	4665      	mov	r5, ip
 800710e:	2a08      	cmp	r2, #8
 8007110:	d10b      	bne.n	800712a <_printf_i+0x112>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	07db      	lsls	r3, r3, #31
 8007116:	d508      	bpl.n	800712a <_printf_i+0x112>
 8007118:	6923      	ldr	r3, [r4, #16]
 800711a:	6862      	ldr	r2, [r4, #4]
 800711c:	429a      	cmp	r2, r3
 800711e:	bfde      	ittt	le
 8007120:	2330      	movle	r3, #48	; 0x30
 8007122:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007126:	f105 35ff 	addle.w	r5, r5, #4294967295
 800712a:	ebac 0305 	sub.w	r3, ip, r5
 800712e:	6123      	str	r3, [r4, #16]
 8007130:	f8cd 8000 	str.w	r8, [sp]
 8007134:	463b      	mov	r3, r7
 8007136:	aa03      	add	r2, sp, #12
 8007138:	4621      	mov	r1, r4
 800713a:	4630      	mov	r0, r6
 800713c:	f7ff fef6 	bl	8006f2c <_printf_common>
 8007140:	3001      	adds	r0, #1
 8007142:	d14d      	bne.n	80071e0 <_printf_i+0x1c8>
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	b005      	add	sp, #20
 800714a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800714e:	4839      	ldr	r0, [pc, #228]	; (8007234 <_printf_i+0x21c>)
 8007150:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007154:	6813      	ldr	r3, [r2, #0]
 8007156:	6821      	ldr	r1, [r4, #0]
 8007158:	1d1d      	adds	r5, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6015      	str	r5, [r2, #0]
 800715e:	060a      	lsls	r2, r1, #24
 8007160:	d50b      	bpl.n	800717a <_printf_i+0x162>
 8007162:	07ca      	lsls	r2, r1, #31
 8007164:	bf44      	itt	mi
 8007166:	f041 0120 	orrmi.w	r1, r1, #32
 800716a:	6021      	strmi	r1, [r4, #0]
 800716c:	b91b      	cbnz	r3, 8007176 <_printf_i+0x15e>
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	f022 0220 	bic.w	r2, r2, #32
 8007174:	6022      	str	r2, [r4, #0]
 8007176:	2210      	movs	r2, #16
 8007178:	e7b7      	b.n	80070ea <_printf_i+0xd2>
 800717a:	064d      	lsls	r5, r1, #25
 800717c:	bf48      	it	mi
 800717e:	b29b      	uxthmi	r3, r3
 8007180:	e7ef      	b.n	8007162 <_printf_i+0x14a>
 8007182:	4665      	mov	r5, ip
 8007184:	fbb3 f1f2 	udiv	r1, r3, r2
 8007188:	fb02 3311 	mls	r3, r2, r1, r3
 800718c:	5cc3      	ldrb	r3, [r0, r3]
 800718e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007192:	460b      	mov	r3, r1
 8007194:	2900      	cmp	r1, #0
 8007196:	d1f5      	bne.n	8007184 <_printf_i+0x16c>
 8007198:	e7b9      	b.n	800710e <_printf_i+0xf6>
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	6825      	ldr	r5, [r4, #0]
 800719e:	6961      	ldr	r1, [r4, #20]
 80071a0:	1d18      	adds	r0, r3, #4
 80071a2:	6010      	str	r0, [r2, #0]
 80071a4:	0628      	lsls	r0, r5, #24
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	d501      	bpl.n	80071ae <_printf_i+0x196>
 80071aa:	6019      	str	r1, [r3, #0]
 80071ac:	e002      	b.n	80071b4 <_printf_i+0x19c>
 80071ae:	066a      	lsls	r2, r5, #25
 80071b0:	d5fb      	bpl.n	80071aa <_printf_i+0x192>
 80071b2:	8019      	strh	r1, [r3, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	6123      	str	r3, [r4, #16]
 80071b8:	4665      	mov	r5, ip
 80071ba:	e7b9      	b.n	8007130 <_printf_i+0x118>
 80071bc:	6813      	ldr	r3, [r2, #0]
 80071be:	1d19      	adds	r1, r3, #4
 80071c0:	6011      	str	r1, [r2, #0]
 80071c2:	681d      	ldr	r5, [r3, #0]
 80071c4:	6862      	ldr	r2, [r4, #4]
 80071c6:	2100      	movs	r1, #0
 80071c8:	4628      	mov	r0, r5
 80071ca:	f7f9 f839 	bl	8000240 <memchr>
 80071ce:	b108      	cbz	r0, 80071d4 <_printf_i+0x1bc>
 80071d0:	1b40      	subs	r0, r0, r5
 80071d2:	6060      	str	r0, [r4, #4]
 80071d4:	6863      	ldr	r3, [r4, #4]
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	2300      	movs	r3, #0
 80071da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071de:	e7a7      	b.n	8007130 <_printf_i+0x118>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	462a      	mov	r2, r5
 80071e4:	4639      	mov	r1, r7
 80071e6:	4630      	mov	r0, r6
 80071e8:	47c0      	blx	r8
 80071ea:	3001      	adds	r0, #1
 80071ec:	d0aa      	beq.n	8007144 <_printf_i+0x12c>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	079b      	lsls	r3, r3, #30
 80071f2:	d413      	bmi.n	800721c <_printf_i+0x204>
 80071f4:	68e0      	ldr	r0, [r4, #12]
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	4298      	cmp	r0, r3
 80071fa:	bfb8      	it	lt
 80071fc:	4618      	movlt	r0, r3
 80071fe:	e7a3      	b.n	8007148 <_printf_i+0x130>
 8007200:	2301      	movs	r3, #1
 8007202:	464a      	mov	r2, r9
 8007204:	4639      	mov	r1, r7
 8007206:	4630      	mov	r0, r6
 8007208:	47c0      	blx	r8
 800720a:	3001      	adds	r0, #1
 800720c:	d09a      	beq.n	8007144 <_printf_i+0x12c>
 800720e:	3501      	adds	r5, #1
 8007210:	68e3      	ldr	r3, [r4, #12]
 8007212:	9a03      	ldr	r2, [sp, #12]
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	42ab      	cmp	r3, r5
 8007218:	dcf2      	bgt.n	8007200 <_printf_i+0x1e8>
 800721a:	e7eb      	b.n	80071f4 <_printf_i+0x1dc>
 800721c:	2500      	movs	r5, #0
 800721e:	f104 0919 	add.w	r9, r4, #25
 8007222:	e7f5      	b.n	8007210 <_printf_i+0x1f8>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1ac      	bne.n	8007182 <_printf_i+0x16a>
 8007228:	7803      	ldrb	r3, [r0, #0]
 800722a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800722e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007232:	e76c      	b.n	800710e <_printf_i+0xf6>
 8007234:	08007d35 	.word	0x08007d35
 8007238:	08007d46 	.word	0x08007d46

0800723c <_sbrk_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4c06      	ldr	r4, [pc, #24]	; (8007258 <_sbrk_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4605      	mov	r5, r0
 8007244:	4608      	mov	r0, r1
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	f7ff fb2c 	bl	80068a4 <_sbrk>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_sbrk_r+0x1a>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	b103      	cbz	r3, 8007256 <_sbrk_r+0x1a>
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20004764 	.word	0x20004764

0800725c <__sread>:
 800725c:	b510      	push	{r4, lr}
 800725e:	460c      	mov	r4, r1
 8007260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007264:	f000 fa96 	bl	8007794 <_read_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	bfab      	itete	ge
 800726c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800726e:	89a3      	ldrhlt	r3, [r4, #12]
 8007270:	181b      	addge	r3, r3, r0
 8007272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007276:	bfac      	ite	ge
 8007278:	6563      	strge	r3, [r4, #84]	; 0x54
 800727a:	81a3      	strhlt	r3, [r4, #12]
 800727c:	bd10      	pop	{r4, pc}

0800727e <__swrite>:
 800727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007282:	461f      	mov	r7, r3
 8007284:	898b      	ldrh	r3, [r1, #12]
 8007286:	05db      	lsls	r3, r3, #23
 8007288:	4605      	mov	r5, r0
 800728a:	460c      	mov	r4, r1
 800728c:	4616      	mov	r6, r2
 800728e:	d505      	bpl.n	800729c <__swrite+0x1e>
 8007290:	2302      	movs	r3, #2
 8007292:	2200      	movs	r2, #0
 8007294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007298:	f000 f9b6 	bl	8007608 <_lseek_r>
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	4632      	mov	r2, r6
 80072aa:	463b      	mov	r3, r7
 80072ac:	4628      	mov	r0, r5
 80072ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072b2:	f000 b869 	b.w	8007388 <_write_r>

080072b6 <__sseek>:
 80072b6:	b510      	push	{r4, lr}
 80072b8:	460c      	mov	r4, r1
 80072ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072be:	f000 f9a3 	bl	8007608 <_lseek_r>
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	bf15      	itete	ne
 80072c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80072ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072d2:	81a3      	strheq	r3, [r4, #12]
 80072d4:	bf18      	it	ne
 80072d6:	81a3      	strhne	r3, [r4, #12]
 80072d8:	bd10      	pop	{r4, pc}

080072da <__sclose>:
 80072da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072de:	f000 b8d3 	b.w	8007488 <_close_r>
	...

080072e4 <__swbuf_r>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	460e      	mov	r6, r1
 80072e8:	4614      	mov	r4, r2
 80072ea:	4605      	mov	r5, r0
 80072ec:	b118      	cbz	r0, 80072f6 <__swbuf_r+0x12>
 80072ee:	6983      	ldr	r3, [r0, #24]
 80072f0:	b90b      	cbnz	r3, 80072f6 <__swbuf_r+0x12>
 80072f2:	f7ff fbf7 	bl	8006ae4 <__sinit>
 80072f6:	4b21      	ldr	r3, [pc, #132]	; (800737c <__swbuf_r+0x98>)
 80072f8:	429c      	cmp	r4, r3
 80072fa:	d12a      	bne.n	8007352 <__swbuf_r+0x6e>
 80072fc:	686c      	ldr	r4, [r5, #4]
 80072fe:	69a3      	ldr	r3, [r4, #24]
 8007300:	60a3      	str	r3, [r4, #8]
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	071a      	lsls	r2, r3, #28
 8007306:	d52e      	bpl.n	8007366 <__swbuf_r+0x82>
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	b363      	cbz	r3, 8007366 <__swbuf_r+0x82>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	6820      	ldr	r0, [r4, #0]
 8007310:	1ac0      	subs	r0, r0, r3
 8007312:	6963      	ldr	r3, [r4, #20]
 8007314:	b2f6      	uxtb	r6, r6
 8007316:	4283      	cmp	r3, r0
 8007318:	4637      	mov	r7, r6
 800731a:	dc04      	bgt.n	8007326 <__swbuf_r+0x42>
 800731c:	4621      	mov	r1, r4
 800731e:	4628      	mov	r0, r5
 8007320:	f000 f948 	bl	80075b4 <_fflush_r>
 8007324:	bb28      	cbnz	r0, 8007372 <__swbuf_r+0x8e>
 8007326:	68a3      	ldr	r3, [r4, #8]
 8007328:	3b01      	subs	r3, #1
 800732a:	60a3      	str	r3, [r4, #8]
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	6022      	str	r2, [r4, #0]
 8007332:	701e      	strb	r6, [r3, #0]
 8007334:	6963      	ldr	r3, [r4, #20]
 8007336:	3001      	adds	r0, #1
 8007338:	4283      	cmp	r3, r0
 800733a:	d004      	beq.n	8007346 <__swbuf_r+0x62>
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	07db      	lsls	r3, r3, #31
 8007340:	d519      	bpl.n	8007376 <__swbuf_r+0x92>
 8007342:	2e0a      	cmp	r6, #10
 8007344:	d117      	bne.n	8007376 <__swbuf_r+0x92>
 8007346:	4621      	mov	r1, r4
 8007348:	4628      	mov	r0, r5
 800734a:	f000 f933 	bl	80075b4 <_fflush_r>
 800734e:	b190      	cbz	r0, 8007376 <__swbuf_r+0x92>
 8007350:	e00f      	b.n	8007372 <__swbuf_r+0x8e>
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <__swbuf_r+0x9c>)
 8007354:	429c      	cmp	r4, r3
 8007356:	d101      	bne.n	800735c <__swbuf_r+0x78>
 8007358:	68ac      	ldr	r4, [r5, #8]
 800735a:	e7d0      	b.n	80072fe <__swbuf_r+0x1a>
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <__swbuf_r+0xa0>)
 800735e:	429c      	cmp	r4, r3
 8007360:	bf08      	it	eq
 8007362:	68ec      	ldreq	r4, [r5, #12]
 8007364:	e7cb      	b.n	80072fe <__swbuf_r+0x1a>
 8007366:	4621      	mov	r1, r4
 8007368:	4628      	mov	r0, r5
 800736a:	f000 f81f 	bl	80073ac <__swsetup_r>
 800736e:	2800      	cmp	r0, #0
 8007370:	d0cc      	beq.n	800730c <__swbuf_r+0x28>
 8007372:	f04f 37ff 	mov.w	r7, #4294967295
 8007376:	4638      	mov	r0, r7
 8007378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800737a:	bf00      	nop
 800737c:	08007ce4 	.word	0x08007ce4
 8007380:	08007d04 	.word	0x08007d04
 8007384:	08007cc4 	.word	0x08007cc4

08007388 <_write_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4c07      	ldr	r4, [pc, #28]	; (80073a8 <_write_r+0x20>)
 800738c:	4605      	mov	r5, r0
 800738e:	4608      	mov	r0, r1
 8007390:	4611      	mov	r1, r2
 8007392:	2200      	movs	r2, #0
 8007394:	6022      	str	r2, [r4, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	f7fe fa8c 	bl	80058b4 <_write>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_write_r+0x1e>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_write_r+0x1e>
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	20004764 	.word	0x20004764

080073ac <__swsetup_r>:
 80073ac:	4b32      	ldr	r3, [pc, #200]	; (8007478 <__swsetup_r+0xcc>)
 80073ae:	b570      	push	{r4, r5, r6, lr}
 80073b0:	681d      	ldr	r5, [r3, #0]
 80073b2:	4606      	mov	r6, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	b125      	cbz	r5, 80073c2 <__swsetup_r+0x16>
 80073b8:	69ab      	ldr	r3, [r5, #24]
 80073ba:	b913      	cbnz	r3, 80073c2 <__swsetup_r+0x16>
 80073bc:	4628      	mov	r0, r5
 80073be:	f7ff fb91 	bl	8006ae4 <__sinit>
 80073c2:	4b2e      	ldr	r3, [pc, #184]	; (800747c <__swsetup_r+0xd0>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	d10f      	bne.n	80073e8 <__swsetup_r+0x3c>
 80073c8:	686c      	ldr	r4, [r5, #4]
 80073ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	0715      	lsls	r5, r2, #28
 80073d2:	d42c      	bmi.n	800742e <__swsetup_r+0x82>
 80073d4:	06d0      	lsls	r0, r2, #27
 80073d6:	d411      	bmi.n	80073fc <__swsetup_r+0x50>
 80073d8:	2209      	movs	r2, #9
 80073da:	6032      	str	r2, [r6, #0]
 80073dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	e03e      	b.n	8007466 <__swsetup_r+0xba>
 80073e8:	4b25      	ldr	r3, [pc, #148]	; (8007480 <__swsetup_r+0xd4>)
 80073ea:	429c      	cmp	r4, r3
 80073ec:	d101      	bne.n	80073f2 <__swsetup_r+0x46>
 80073ee:	68ac      	ldr	r4, [r5, #8]
 80073f0:	e7eb      	b.n	80073ca <__swsetup_r+0x1e>
 80073f2:	4b24      	ldr	r3, [pc, #144]	; (8007484 <__swsetup_r+0xd8>)
 80073f4:	429c      	cmp	r4, r3
 80073f6:	bf08      	it	eq
 80073f8:	68ec      	ldreq	r4, [r5, #12]
 80073fa:	e7e6      	b.n	80073ca <__swsetup_r+0x1e>
 80073fc:	0751      	lsls	r1, r2, #29
 80073fe:	d512      	bpl.n	8007426 <__swsetup_r+0x7a>
 8007400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007402:	b141      	cbz	r1, 8007416 <__swsetup_r+0x6a>
 8007404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <__swsetup_r+0x66>
 800740c:	4630      	mov	r0, r6
 800740e:	f000 f973 	bl	80076f8 <_free_r>
 8007412:	2300      	movs	r3, #0
 8007414:	6363      	str	r3, [r4, #52]	; 0x34
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	2300      	movs	r3, #0
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	b94b      	cbnz	r3, 8007446 <__swsetup_r+0x9a>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743c:	d003      	beq.n	8007446 <__swsetup_r+0x9a>
 800743e:	4621      	mov	r1, r4
 8007440:	4630      	mov	r0, r6
 8007442:	f000 f917 	bl	8007674 <__smakebuf_r>
 8007446:	89a2      	ldrh	r2, [r4, #12]
 8007448:	f012 0301 	ands.w	r3, r2, #1
 800744c:	d00c      	beq.n	8007468 <__swsetup_r+0xbc>
 800744e:	2300      	movs	r3, #0
 8007450:	60a3      	str	r3, [r4, #8]
 8007452:	6963      	ldr	r3, [r4, #20]
 8007454:	425b      	negs	r3, r3
 8007456:	61a3      	str	r3, [r4, #24]
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	b953      	cbnz	r3, 8007472 <__swsetup_r+0xc6>
 800745c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007460:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007464:	d1ba      	bne.n	80073dc <__swsetup_r+0x30>
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	0792      	lsls	r2, r2, #30
 800746a:	bf58      	it	pl
 800746c:	6963      	ldrpl	r3, [r4, #20]
 800746e:	60a3      	str	r3, [r4, #8]
 8007470:	e7f2      	b.n	8007458 <__swsetup_r+0xac>
 8007472:	2000      	movs	r0, #0
 8007474:	e7f7      	b.n	8007466 <__swsetup_r+0xba>
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c
 800747c:	08007ce4 	.word	0x08007ce4
 8007480:	08007d04 	.word	0x08007d04
 8007484:	08007cc4 	.word	0x08007cc4

08007488 <_close_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4c06      	ldr	r4, [pc, #24]	; (80074a4 <_close_r+0x1c>)
 800748c:	2300      	movs	r3, #0
 800748e:	4605      	mov	r5, r0
 8007490:	4608      	mov	r0, r1
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	f7ff f9d1 	bl	800683a <_close>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_close_r+0x1a>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_close_r+0x1a>
 80074a0:	602b      	str	r3, [r5, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20004764 	.word	0x20004764

080074a8 <__sflush_r>:
 80074a8:	898a      	ldrh	r2, [r1, #12]
 80074aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ae:	4605      	mov	r5, r0
 80074b0:	0710      	lsls	r0, r2, #28
 80074b2:	460c      	mov	r4, r1
 80074b4:	d458      	bmi.n	8007568 <__sflush_r+0xc0>
 80074b6:	684b      	ldr	r3, [r1, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc05      	bgt.n	80074c8 <__sflush_r+0x20>
 80074bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dc02      	bgt.n	80074c8 <__sflush_r+0x20>
 80074c2:	2000      	movs	r0, #0
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	d0f9      	beq.n	80074c2 <__sflush_r+0x1a>
 80074ce:	2300      	movs	r3, #0
 80074d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074d4:	682f      	ldr	r7, [r5, #0]
 80074d6:	6a21      	ldr	r1, [r4, #32]
 80074d8:	602b      	str	r3, [r5, #0]
 80074da:	d032      	beq.n	8007542 <__sflush_r+0x9a>
 80074dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	075a      	lsls	r2, r3, #29
 80074e2:	d505      	bpl.n	80074f0 <__sflush_r+0x48>
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	1ac0      	subs	r0, r0, r3
 80074e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074ea:	b10b      	cbz	r3, 80074f0 <__sflush_r+0x48>
 80074ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074ee:	1ac0      	subs	r0, r0, r3
 80074f0:	2300      	movs	r3, #0
 80074f2:	4602      	mov	r2, r0
 80074f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f6:	6a21      	ldr	r1, [r4, #32]
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b0      	blx	r6
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	d106      	bne.n	8007510 <__sflush_r+0x68>
 8007502:	6829      	ldr	r1, [r5, #0]
 8007504:	291d      	cmp	r1, #29
 8007506:	d848      	bhi.n	800759a <__sflush_r+0xf2>
 8007508:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <__sflush_r+0x108>)
 800750a:	40ca      	lsrs	r2, r1
 800750c:	07d6      	lsls	r6, r2, #31
 800750e:	d544      	bpl.n	800759a <__sflush_r+0xf2>
 8007510:	2200      	movs	r2, #0
 8007512:	6062      	str	r2, [r4, #4]
 8007514:	04d9      	lsls	r1, r3, #19
 8007516:	6922      	ldr	r2, [r4, #16]
 8007518:	6022      	str	r2, [r4, #0]
 800751a:	d504      	bpl.n	8007526 <__sflush_r+0x7e>
 800751c:	1c42      	adds	r2, r0, #1
 800751e:	d101      	bne.n	8007524 <__sflush_r+0x7c>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b903      	cbnz	r3, 8007526 <__sflush_r+0x7e>
 8007524:	6560      	str	r0, [r4, #84]	; 0x54
 8007526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007528:	602f      	str	r7, [r5, #0]
 800752a:	2900      	cmp	r1, #0
 800752c:	d0c9      	beq.n	80074c2 <__sflush_r+0x1a>
 800752e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007532:	4299      	cmp	r1, r3
 8007534:	d002      	beq.n	800753c <__sflush_r+0x94>
 8007536:	4628      	mov	r0, r5
 8007538:	f000 f8de 	bl	80076f8 <_free_r>
 800753c:	2000      	movs	r0, #0
 800753e:	6360      	str	r0, [r4, #52]	; 0x34
 8007540:	e7c0      	b.n	80074c4 <__sflush_r+0x1c>
 8007542:	2301      	movs	r3, #1
 8007544:	4628      	mov	r0, r5
 8007546:	47b0      	blx	r6
 8007548:	1c41      	adds	r1, r0, #1
 800754a:	d1c8      	bne.n	80074de <__sflush_r+0x36>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0c5      	beq.n	80074de <__sflush_r+0x36>
 8007552:	2b1d      	cmp	r3, #29
 8007554:	d001      	beq.n	800755a <__sflush_r+0xb2>
 8007556:	2b16      	cmp	r3, #22
 8007558:	d101      	bne.n	800755e <__sflush_r+0xb6>
 800755a:	602f      	str	r7, [r5, #0]
 800755c:	e7b1      	b.n	80074c2 <__sflush_r+0x1a>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	e7ad      	b.n	80074c4 <__sflush_r+0x1c>
 8007568:	690f      	ldr	r7, [r1, #16]
 800756a:	2f00      	cmp	r7, #0
 800756c:	d0a9      	beq.n	80074c2 <__sflush_r+0x1a>
 800756e:	0793      	lsls	r3, r2, #30
 8007570:	680e      	ldr	r6, [r1, #0]
 8007572:	bf08      	it	eq
 8007574:	694b      	ldreq	r3, [r1, #20]
 8007576:	600f      	str	r7, [r1, #0]
 8007578:	bf18      	it	ne
 800757a:	2300      	movne	r3, #0
 800757c:	eba6 0807 	sub.w	r8, r6, r7
 8007580:	608b      	str	r3, [r1, #8]
 8007582:	f1b8 0f00 	cmp.w	r8, #0
 8007586:	dd9c      	ble.n	80074c2 <__sflush_r+0x1a>
 8007588:	4643      	mov	r3, r8
 800758a:	463a      	mov	r2, r7
 800758c:	6a21      	ldr	r1, [r4, #32]
 800758e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007590:	4628      	mov	r0, r5
 8007592:	47b0      	blx	r6
 8007594:	2800      	cmp	r0, #0
 8007596:	dc06      	bgt.n	80075a6 <__sflush_r+0xfe>
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e78e      	b.n	80074c4 <__sflush_r+0x1c>
 80075a6:	4407      	add	r7, r0
 80075a8:	eba8 0800 	sub.w	r8, r8, r0
 80075ac:	e7e9      	b.n	8007582 <__sflush_r+0xda>
 80075ae:	bf00      	nop
 80075b0:	20400001 	.word	0x20400001

080075b4 <_fflush_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	690b      	ldr	r3, [r1, #16]
 80075b8:	4605      	mov	r5, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b1db      	cbz	r3, 80075f6 <_fflush_r+0x42>
 80075be:	b118      	cbz	r0, 80075c8 <_fflush_r+0x14>
 80075c0:	6983      	ldr	r3, [r0, #24]
 80075c2:	b90b      	cbnz	r3, 80075c8 <_fflush_r+0x14>
 80075c4:	f7ff fa8e 	bl	8006ae4 <__sinit>
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <_fflush_r+0x48>)
 80075ca:	429c      	cmp	r4, r3
 80075cc:	d109      	bne.n	80075e2 <_fflush_r+0x2e>
 80075ce:	686c      	ldr	r4, [r5, #4]
 80075d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d4:	b17b      	cbz	r3, 80075f6 <_fflush_r+0x42>
 80075d6:	4621      	mov	r1, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075de:	f7ff bf63 	b.w	80074a8 <__sflush_r>
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <_fflush_r+0x4c>)
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d101      	bne.n	80075ec <_fflush_r+0x38>
 80075e8:	68ac      	ldr	r4, [r5, #8]
 80075ea:	e7f1      	b.n	80075d0 <_fflush_r+0x1c>
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <_fflush_r+0x50>)
 80075ee:	429c      	cmp	r4, r3
 80075f0:	bf08      	it	eq
 80075f2:	68ec      	ldreq	r4, [r5, #12]
 80075f4:	e7ec      	b.n	80075d0 <_fflush_r+0x1c>
 80075f6:	2000      	movs	r0, #0
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	08007ce4 	.word	0x08007ce4
 8007600:	08007d04 	.word	0x08007d04
 8007604:	08007cc4 	.word	0x08007cc4

08007608 <_lseek_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4c07      	ldr	r4, [pc, #28]	; (8007628 <_lseek_r+0x20>)
 800760c:	4605      	mov	r5, r0
 800760e:	4608      	mov	r0, r1
 8007610:	4611      	mov	r1, r2
 8007612:	2200      	movs	r2, #0
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f7ff f936 	bl	8006888 <_lseek>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_lseek_r+0x1e>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	b103      	cbz	r3, 8007626 <_lseek_r+0x1e>
 8007624:	602b      	str	r3, [r5, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20004764 	.word	0x20004764

0800762c <__swhatbuf_r>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	460e      	mov	r6, r1
 8007630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007634:	2900      	cmp	r1, #0
 8007636:	b096      	sub	sp, #88	; 0x58
 8007638:	4614      	mov	r4, r2
 800763a:	461d      	mov	r5, r3
 800763c:	da07      	bge.n	800764e <__swhatbuf_r+0x22>
 800763e:	2300      	movs	r3, #0
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	89b3      	ldrh	r3, [r6, #12]
 8007644:	061a      	lsls	r2, r3, #24
 8007646:	d410      	bmi.n	800766a <__swhatbuf_r+0x3e>
 8007648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800764c:	e00e      	b.n	800766c <__swhatbuf_r+0x40>
 800764e:	466a      	mov	r2, sp
 8007650:	f000 f8b2 	bl	80077b8 <_fstat_r>
 8007654:	2800      	cmp	r0, #0
 8007656:	dbf2      	blt.n	800763e <__swhatbuf_r+0x12>
 8007658:	9a01      	ldr	r2, [sp, #4]
 800765a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800765e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007662:	425a      	negs	r2, r3
 8007664:	415a      	adcs	r2, r3
 8007666:	602a      	str	r2, [r5, #0]
 8007668:	e7ee      	b.n	8007648 <__swhatbuf_r+0x1c>
 800766a:	2340      	movs	r3, #64	; 0x40
 800766c:	2000      	movs	r0, #0
 800766e:	6023      	str	r3, [r4, #0]
 8007670:	b016      	add	sp, #88	; 0x58
 8007672:	bd70      	pop	{r4, r5, r6, pc}

08007674 <__smakebuf_r>:
 8007674:	898b      	ldrh	r3, [r1, #12]
 8007676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007678:	079d      	lsls	r5, r3, #30
 800767a:	4606      	mov	r6, r0
 800767c:	460c      	mov	r4, r1
 800767e:	d507      	bpl.n	8007690 <__smakebuf_r+0x1c>
 8007680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	2301      	movs	r3, #1
 800768a:	6163      	str	r3, [r4, #20]
 800768c:	b002      	add	sp, #8
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	ab01      	add	r3, sp, #4
 8007692:	466a      	mov	r2, sp
 8007694:	f7ff ffca 	bl	800762c <__swhatbuf_r>
 8007698:	9900      	ldr	r1, [sp, #0]
 800769a:	4605      	mov	r5, r0
 800769c:	4630      	mov	r0, r6
 800769e:	f7ff faab 	bl	8006bf8 <_malloc_r>
 80076a2:	b948      	cbnz	r0, 80076b8 <__smakebuf_r+0x44>
 80076a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a8:	059a      	lsls	r2, r3, #22
 80076aa:	d4ef      	bmi.n	800768c <__smakebuf_r+0x18>
 80076ac:	f023 0303 	bic.w	r3, r3, #3
 80076b0:	f043 0302 	orr.w	r3, r3, #2
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	e7e3      	b.n	8007680 <__smakebuf_r+0xc>
 80076b8:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <__smakebuf_r+0x7c>)
 80076ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	6020      	str	r0, [r4, #0]
 80076c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	6163      	str	r3, [r4, #20]
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	6120      	str	r0, [r4, #16]
 80076ce:	b15b      	cbz	r3, 80076e8 <__smakebuf_r+0x74>
 80076d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076d4:	4630      	mov	r0, r6
 80076d6:	f000 f881 	bl	80077dc <_isatty_r>
 80076da:	b128      	cbz	r0, 80076e8 <__smakebuf_r+0x74>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	431d      	orrs	r5, r3
 80076ec:	81a5      	strh	r5, [r4, #12]
 80076ee:	e7cd      	b.n	800768c <__smakebuf_r+0x18>
 80076f0:	08006aad 	.word	0x08006aad

080076f4 <__malloc_lock>:
 80076f4:	4770      	bx	lr

080076f6 <__malloc_unlock>:
 80076f6:	4770      	bx	lr

080076f8 <_free_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4605      	mov	r5, r0
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d045      	beq.n	800778c <_free_r+0x94>
 8007700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007704:	1f0c      	subs	r4, r1, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfb8      	it	lt
 800770a:	18e4      	addlt	r4, r4, r3
 800770c:	f7ff fff2 	bl	80076f4 <__malloc_lock>
 8007710:	4a1f      	ldr	r2, [pc, #124]	; (8007790 <_free_r+0x98>)
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	4610      	mov	r0, r2
 8007716:	b933      	cbnz	r3, 8007726 <_free_r+0x2e>
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	6014      	str	r4, [r2, #0]
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f7ff bfe8 	b.w	80076f6 <__malloc_unlock>
 8007726:	42a3      	cmp	r3, r4
 8007728:	d90c      	bls.n	8007744 <_free_r+0x4c>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	1862      	adds	r2, r4, r1
 800772e:	4293      	cmp	r3, r2
 8007730:	bf04      	itt	eq
 8007732:	681a      	ldreq	r2, [r3, #0]
 8007734:	685b      	ldreq	r3, [r3, #4]
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	bf04      	itt	eq
 800773a:	1852      	addeq	r2, r2, r1
 800773c:	6022      	streq	r2, [r4, #0]
 800773e:	6004      	str	r4, [r0, #0]
 8007740:	e7ec      	b.n	800771c <_free_r+0x24>
 8007742:	4613      	mov	r3, r2
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	b10a      	cbz	r2, 800774c <_free_r+0x54>
 8007748:	42a2      	cmp	r2, r4
 800774a:	d9fa      	bls.n	8007742 <_free_r+0x4a>
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	1858      	adds	r0, r3, r1
 8007750:	42a0      	cmp	r0, r4
 8007752:	d10b      	bne.n	800776c <_free_r+0x74>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	4401      	add	r1, r0
 8007758:	1858      	adds	r0, r3, r1
 800775a:	4282      	cmp	r2, r0
 800775c:	6019      	str	r1, [r3, #0]
 800775e:	d1dd      	bne.n	800771c <_free_r+0x24>
 8007760:	6810      	ldr	r0, [r2, #0]
 8007762:	6852      	ldr	r2, [r2, #4]
 8007764:	605a      	str	r2, [r3, #4]
 8007766:	4401      	add	r1, r0
 8007768:	6019      	str	r1, [r3, #0]
 800776a:	e7d7      	b.n	800771c <_free_r+0x24>
 800776c:	d902      	bls.n	8007774 <_free_r+0x7c>
 800776e:	230c      	movs	r3, #12
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	e7d3      	b.n	800771c <_free_r+0x24>
 8007774:	6820      	ldr	r0, [r4, #0]
 8007776:	1821      	adds	r1, r4, r0
 8007778:	428a      	cmp	r2, r1
 800777a:	bf04      	itt	eq
 800777c:	6811      	ldreq	r1, [r2, #0]
 800777e:	6852      	ldreq	r2, [r2, #4]
 8007780:	6062      	str	r2, [r4, #4]
 8007782:	bf04      	itt	eq
 8007784:	1809      	addeq	r1, r1, r0
 8007786:	6021      	streq	r1, [r4, #0]
 8007788:	605c      	str	r4, [r3, #4]
 800778a:	e7c7      	b.n	800771c <_free_r+0x24>
 800778c:	bd38      	pop	{r3, r4, r5, pc}
 800778e:	bf00      	nop
 8007790:	200041f0 	.word	0x200041f0

08007794 <_read_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4c07      	ldr	r4, [pc, #28]	; (80077b4 <_read_r+0x20>)
 8007798:	4605      	mov	r5, r0
 800779a:	4608      	mov	r0, r1
 800779c:	4611      	mov	r1, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	6022      	str	r2, [r4, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f7ff f82c 	bl	8006800 <_read>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_read_r+0x1e>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_read_r+0x1e>
 80077b0:	602b      	str	r3, [r5, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	20004764 	.word	0x20004764

080077b8 <_fstat_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4c07      	ldr	r4, [pc, #28]	; (80077d8 <_fstat_r+0x20>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4605      	mov	r5, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	f7ff f844 	bl	8006852 <_fstat>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	d102      	bne.n	80077d4 <_fstat_r+0x1c>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	b103      	cbz	r3, 80077d4 <_fstat_r+0x1c>
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	bf00      	nop
 80077d8:	20004764 	.word	0x20004764

080077dc <_isatty_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4c06      	ldr	r4, [pc, #24]	; (80077f8 <_isatty_r+0x1c>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4605      	mov	r5, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	f7ff f843 	bl	8006872 <_isatty>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_isatty_r+0x1a>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_isatty_r+0x1a>
 80077f4:	602b      	str	r3, [r5, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20004764 	.word	0x20004764

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr
